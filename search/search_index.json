{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Go REST API Boilerplate <p>Grab it and Go \u2014 a clean, production-ready REST API starter kit in Go with JWT, PostgreSQL, Docker, and Swagger.</p> <p> </p> <p> \ud83d\ude80 Main Repository |  \ud83d\udccb Latest Release |  \ud83d\udc1b Report Issues </p>"},{"location":"#why-grab","title":"\ud83c\udfaf Why GRAB?","text":"<p>Building a REST API in Go shouldn't take days of setup. GRAB gives you a production-ready foundation so you can focus on building features, not infrastructure.</p>"},{"location":"#the-problem-we-solve","title":"The Problem We Solve","text":"<ul> <li>\ud83d\udd27 Setting up project structure and deciding on architecture (see current structure)</li> <li>\ud83d\udd10 Implementing authentication and security</li> <li>\ud83d\udc33 Configuring Docker, hot-reload, and development environment</li> <li>\ud83d\udcda Setting up API documentation and testing tools</li> <li>\ud83d\uddc4\ufe0f Configuring database, migrations, and ORM</li> <li>\u2705 Writing tests and CI/CD pipelines</li> </ul>"},{"location":"#the-grab-solution","title":"The GRAB Solution","text":"<p>One command. Two minutes. Production-ready.</p> <pre><code>make quick-start\n</code></pre> <p>That's it. You get a fully configured, battle-tested REST API with:</p> <ul> <li>\u2705 Clean Architecture - Layered structure that scales</li> <li>\u2705 JWT Authentication - Secure, ready to use</li> <li>\u2705 Hot-Reload Development - See changes in 2 seconds</li> <li>\u2705 Database Migrations - Version-controlled schema</li> <li>\u2705 Interactive API Docs - Swagger UI out of the box</li> <li>\u2705 Automated Tests - Unit and integration tests</li> <li>\u2705 Docker-First - Consistent environments</li> <li>\u2705 Production Optimized - Multi-stage builds, security best practices</li> </ul>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li> <p> JWT Authentication</p> <p>Secure token-based authentication with HS256 algorithm and bcrypt password hashing</p> </li> <li> <p> User Management</p> <p>Complete CRUD operations with validation and error handling</p> </li> <li> <p> PostgreSQL + GORM</p> <p>Robust database with powerful ORM and automated migrations</p> </li> <li> <p> Docker Development</p> <p>Hot-reload with Air (~2 sec feedback), volume mounting for live code sync</p> </li> <li> <p> Production Ready</p> <p>Optimized multi-stage Docker builds, minimal Alpine images</p> </li> <li> <p> Swagger/OpenAPI</p> <p>Interactive API documentation with \"Try it out\" feature</p> </li> <li> <p> Database Migrations</p> <p>Version-controlled schema changes with golang-migrate</p> </li> <li> <p> Automated Testing</p> <p>Unit &amp; integration tests with 75%+ coverage</p> </li> <li> <p> GitHub Actions CI</p> <p>Automated linting, testing, and code quality checks</p> </li> <li> <p> Make Commands</p> <p>Simplified workflow automation with auto-detection (Docker/host)</p> </li> <li> <p> Postman Collection</p> <p>Pre-configured API tests with example requests</p> </li> <li> <p> Clean Architecture</p> <p>Layered, maintainable structure (Handler \u2192 Service \u2192 Repository)</p> <p>\ud83d\udcc1 Directory Structure: See the Project Summary for a high-level overview of the current layout and main directories.</p> </li> <li> <p> Security Best Practices</p> <p>Bcrypt hashing, input validation, SQL injection protection</p> </li> <li> <p> CORS Support</p> <p>Configurable cross-origin requests for frontend integration</p> </li> <li> <p> Code Quality</p> <p>golangci-lint configured with best practices</p> </li> <li> <p> Structured Logging</p> <p>JSON logging with request tracking, performance metrics, and environment-aware configuration</p> </li> <li> <p> Configuration Management</p> <p>Environment-based configuration with YAML support and validation</p> </li> </ul>"},{"location":"#perfect-for","title":"\ud83d\ude80 Perfect For","text":"<ul> <li> <p> Starting New Projects</p> <p>Skip the setup headache and start building features immediately</p> </li> <li> <p> Learning Go Web Development</p> <p>Production-quality examples and best practices to learn from</p> </li> <li> <p> Building Scalable APIs</p> <p>Architecture that grows with your application</p> </li> <li> <p> Team Projects</p> <p>Consistent structure and standards that everyone can follow</p> </li> <li> <p> Rapid Prototyping</p> <p>Get your MVP running in minutes, not days</p> </li> <li> <p> Enterprise Applications</p> <p>Battle-tested patterns and security best practices</p> </li> </ul>"},{"location":"#quick-start","title":"\ud83c\udfac Quick Start","text":"<p>Get your API running in under 2 minutes:</p> <pre><code># Clone the repository\ngit clone https://github.com/vahiiiid/go-rest-api-boilerplate.git\ncd go-rest-api-boilerplate\n\n# One command to rule them all\nmake quick-start\n</code></pre> <p>\ud83c\udf89 Done! Your API is now running at:</p> <ul> <li>API Base URL: http://localhost:8080/api/v1</li> <li>Swagger UI: http://localhost:8080/swagger/index.html</li> <li>Health Check: http://localhost:8080/health</li> </ul> <p>\u2728 New in v1.1.0: Request logging is automatically enabled! Check the logs to see structured JSON output for each request.</p> <p>\u27a1\ufe0f Full Setup Guide for more options (manual setup, production deployment)</p>"},{"location":"#whats-next","title":"\ud83d\udcd6 What's Next?","text":"<ul> <li> <p> Setup Guide</p> <p>Quick start, Docker development, manual setup, and production deployment</p> </li> <li> <p> Development Guide</p> <p>Learn the architecture and how to build your own features</p> </li> <li> <p> TODO List Example</p> <p>Complete step-by-step tutorial showing how to add new endpoints</p> </li> <li> <p> Testing Guide</p> <p>How to write and run tests for your API</p> </li> <li> <p> Docker Guide</p> <p>Container setup, hot-reload, and production deployment</p> </li> <li> <p> Logging &amp; Monitoring</p> <p>Structured logging, configuration, and production monitoring setup</p> </li> <li> <p> Swagger Guide</p> <p>API documentation generation and usage</p> </li> <li> <p> Quick Reference</p> <p>Command cheat sheet and common tasks</p> </li> <li> <p> Project Summary</p> <p>Architecture overview and design patterns</p> </li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>GRAB follows clean architecture principles with clear separation of concerns:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Handler Layer               \u2502  \u2190 HTTP handlers, request/response\n\u2502   (internal/user/handler.go)        \u2502     validation, error handling\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Service Layer               \u2502  \u2190 Business logic, orchestration\n\u2502   (internal/user/service.go)        \u2502     transactions, domain rules\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Repository Layer              \u2502  \u2190 Data access, CRUD operations\n\u2502  (internal/user/repository.go)      \u2502     database queries\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Database (PostgreSQL)       \u2502  \u2190 Data persistence\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#key-principles","title":"Key Principles","text":"<ul> <li>\u2705 Separation of Concerns - Each layer has a single responsibility</li> <li>\u2705 Dependency Injection - Loose coupling between layers</li> <li>\u2705 Testability - Easy to mock and test each layer</li> <li>\u2705 Maintainability - Clear structure, easy to navigate (see structure)</li> <li>\u2705 Scalability - Easy to extend with new features</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcome! Please read our contributing guidelines before submitting pull requests.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>Made with \u2764\ufe0f for the Go community</p> <p>\u2b50 Star this repo if you find it useful!</p>"},{"location":"CONFIGURATION/","title":"Configuration Guide","text":"<p>Complete guide to configuring the Go REST API Boilerplate (GRAB) with the Viper-based configuration system.</p>"},{"location":"CONFIGURATION/#overview","title":"\ud83d\udccb Overview","text":"<p>The application uses a layered configuration system powered by Viper that supports multiple configuration sources with clear precedence rules.</p>"},{"location":"CONFIGURATION/#configuration-precedence-highest-to-lowest","title":"Configuration Precedence (Highest to Lowest)","text":"<pre><code>1. Environment Variables (.env file) \n   \u2193 (overrides)\n2. Environment-specific Config Files (config.{environment}.yaml)\n   \u2193 (overrides)  \n3. Base Config File (config.yaml)\n   \u2193 (overrides)\n4. Default Values (built into application)\n</code></pre> <p>This means environment variables always win, followed by environment-specific config files, then the base config file, and finally built-in defaults.</p>"},{"location":"CONFIGURATION/#configuration-files","title":"\ud83d\uddc2\ufe0f Configuration Files","text":""},{"location":"CONFIGURATION/#base-configuration-configsconfigyaml","title":"Base Configuration (<code>configs/config.yaml</code>)","text":"<p>The main configuration file with all available options and documentation:</p> <pre><code># ===========================================\n# Go REST API Boilerplate - Base Configuration\n# ===========================================\n\napp:\n  name: \"GRAB API\"                  # Application name\n  environment: \"development\"        # Environment: development|staging|production\n  debug: true                       # Enable debug mode\n\ndatabase:\n  host: \"db\"                        # Database host\n  port: 5432                        # Database port  \n  user: \"postgres\"                  # Database user\n  password: \"\"                      # Database password (set via env var)\n  name: \"grab\"                      # Database name\n  sslmode: \"disable\"                # SSL mode: disable|require|verify-ca|verify-full\n\njwt:\n  secret: \"\"                        # JWT secret (required, set via env var)\n  ttlhours: 24                      # JWT token TTL in hours\n\nserver:\n  port: \"8080\"                      # Server port\n  readtimeout: 10                   # Read timeout in seconds\n  writetimeout: 10                  # Write timeout in seconds\n\nlogging:\n  level: \"info\"                     # Log level: debug|info|warn|error\n\nratelimit:\n  enabled: false                    # Enable rate limiting\n  requests: 100                     # Max requests per window\n  window: \"1m\"                      # Time window (e.g., \"1m\", \"1h\", \"30s\")\n</code></pre>"},{"location":"CONFIGURATION/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<p>The application automatically loads environment-specific config files based on the <code>APP_ENVIRONMENT</code> variable:</p>"},{"location":"CONFIGURATION/#development-configsconfigdevelopmentyaml","title":"Development (<code>configs/config.development.yaml</code>)","text":"<pre><code>app:\n  name: \"GRAB API (development)\"\n  environment: \"development\"\n  debug: true\n\ndatabase:\n  host: \"db\"\n  password: \"postgres\"              # Default for development\n  sslmode: \"disable\"                # SSL disabled for convenience\n\njwt:\n  secret: \"change-me\"               # Default for development\n</code></pre>"},{"location":"CONFIGURATION/#production-configsconfigproductionyaml","title":"Production (<code>configs/config.production.yaml</code>)","text":"<pre><code>app:\n  name: \"GRAB API\"\n  environment: \"production\"\n  debug: false                      # Disable debug in production\n\ndatabase:\n  password: \"\"                      # Must be set via DATABASE_PASSWORD\n  sslmode: \"require\"                # SSL required in production\n\njwt:\n  secret: \"\"                        # Must be set via JWT_SECRET (min 32 chars)\n</code></pre>"},{"location":"CONFIGURATION/#staging-configsconfigstagingyaml","title":"Staging (<code>configs/config.staging.yaml</code>)","text":"<pre><code>app:\n  name: \"GRAB API (staging)\"\n  environment: \"staging\"\n  debug: false\n\ndatabase:\n  sslmode: \"require\"                # SSL required in staging\n\njwt:\n  secret: \"\"                        # Must be set via JWT_SECRET\n</code></pre>"},{"location":"CONFIGURATION/#environment-variables","title":"\ud83c\udf0d Environment Variables","text":""},{"location":"CONFIGURATION/#complete-reference","title":"Complete Reference","text":"<p>All configuration values can be overridden with environment variables using the format: <code>SECTION_KEY=value</code>.</p>"},{"location":"CONFIGURATION/#application-configuration","title":"Application Configuration","text":"Variable Default Description Accepted Values <code>APP_NAME</code> <code>\"GRAB API\"</code> Application name Any string <code>APP_ENVIRONMENT</code> <code>\"development\"</code> Runtime environment <code>development</code>, <code>staging</code>, <code>production</code> <code>APP_DEBUG</code> <code>true</code> Enable debug mode <code>true</code>, <code>false</code>"},{"location":"CONFIGURATION/#database-configuration","title":"Database Configuration","text":"Variable Default Description Accepted Values <code>DATABASE_HOST</code> <code>\"db\"</code> Database host Hostname or IP <code>DATABASE_PORT</code> <code>5432</code> Database port 1-65535 <code>DATABASE_USER</code> <code>\"postgres\"</code> Database user Any string <code>DATABASE_PASSWORD</code> <code>\"\"</code> Database password Any string (required in production) <code>DATABASE_NAME</code> <code>\"grab\"</code> Database name Valid PostgreSQL database name <code>DATABASE_SSLMODE</code> <code>\"disable\"</code> SSL mode <code>disable</code>, <code>require</code>, <code>verify-ca</code>, <code>verify-full</code>"},{"location":"CONFIGURATION/#jwt-configuration","title":"JWT Configuration","text":"Variable Default Description Accepted Values <code>JWT_SECRET</code> <code>\"\"</code> JWT signing secret Any string (min 32 chars in production) <code>JWT_TTLHOURS</code> <code>24</code> Token TTL in hours Positive integer"},{"location":"CONFIGURATION/#server-configuration","title":"Server Configuration","text":"Variable Default Description Accepted Values <code>SERVER_PORT</code> <code>\"8080\"</code> Server port <code>\"1\"</code> to <code>\"65535\"</code> <code>SERVER_READTIMEOUT</code> <code>10</code> Read timeout (seconds) Positive integer <code>SERVER_WRITETIMEOUT</code> <code>10</code> Write timeout (seconds) Positive integer"},{"location":"CONFIGURATION/#logging-configuration","title":"Logging Configuration","text":"Variable Default Description Accepted Values <code>LOGGING_LEVEL</code> <code>\"info\"</code> Log level <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code>"},{"location":"CONFIGURATION/#rate-limiting-configuration","title":"Rate Limiting Configuration","text":"Variable Default Description Accepted Values <code>RATELIMIT_ENABLED</code> <code>false</code> Enable rate limiting <code>true</code>, <code>false</code> <code>RATELIMIT_REQUESTS</code> <code>100</code> Max requests per window Positive integer <code>RATELIMIT_WINDOW</code> <code>\"1m\"</code> Time window Go duration format (<code>1s</code>, <code>1m</code>, <code>1h</code>)"},{"location":"CONFIGURATION/#configuration-examples","title":"\ud83d\udd27 Configuration Examples","text":""},{"location":"CONFIGURATION/#example-1-development-setup","title":"Example 1: Development Setup","text":"<p>Create <code>.env</code> file:</p> <pre><code># Development environment\nAPP_ENVIRONMENT=development\nAPP_DEBUG=true\n\n# Database (Docker setup)\nDATABASE_HOST=db\nDATABASE_PASSWORD=postgres\n\n# JWT (development only - use stronger secret in production)\nJWT_SECRET=dev-secret-change-in-production\n\n# Logging\nLOGGING_LEVEL=debug\n</code></pre>"},{"location":"CONFIGURATION/#example-2-production-setup","title":"Example 2: Production Setup","text":"<p>Create <code>.env</code> file:</p> <pre><code># Production environment\nAPP_ENVIRONMENT=production\nAPP_DEBUG=false\n\n# Database (production values)\nDATABASE_HOST=prod-db.example.com\nDATABASE_PASSWORD=super-secure-password\nDATABASE_SSLMODE=require\n\n# JWT (strong production secret)\nJWT_SECRET=this-is-a-very-strong-production-jwt-secret-that-is-at-least-32-characters-long\nJWT_TTLHOURS=1\n\n# Server\nSERVER_PORT=8080\nSERVER_READTIMEOUT=30\nSERVER_WRITETIMEOUT=30\n\n# Logging\nLOGGING_LEVEL=warn\n\n# Rate Limiting\nRATELIMIT_ENABLED=true\nRATELIMIT_REQUESTS=60\nRATELIMIT_WINDOW=1m\n</code></pre>"},{"location":"CONFIGURATION/#example-3-docker-compose-override","title":"Example 3: Docker Compose Override","text":"<pre><code># docker-compose.override.yml\nversion: '3.8'\n\nservices:\n  app:\n    environment:\n      - APP_ENVIRONMENT=staging\n      - DATABASE_HOST=staging-db\n      - JWT_SECRET=staging-jwt-secret-32-chars-min\n      - LOGGING_LEVEL=info\n      - RATELIMIT_ENABLED=true\n</code></pre>"},{"location":"CONFIGURATION/#quick-setup-commands","title":"\u26a1 Quick Setup Commands","text":""},{"location":"CONFIGURATION/#copy-and-configure","title":"Copy and Configure","text":"<pre><code># Copy example file\ncp .env.example .env\n\n# Edit with your values\nnano .env\n</code></pre>"},{"location":"CONFIGURATION/#verify-configuration","title":"Verify Configuration","text":"<pre><code># Check if app starts correctly\nmake up\n\n# Check health endpoint\ncurl http://localhost:8080/health\n\n# View configuration (debug info)\ndocker logs go-rest-api-boilerplate_app_1 | grep -i config\n</code></pre>"},{"location":"CONFIGURATION/#security-best-practices","title":"\ud83d\udd12 Security Best Practices","text":""},{"location":"CONFIGURATION/#production-configuration","title":"Production Configuration","text":"<ol> <li> <p>Always use environment variables for secrets:    <pre><code># \u2705 Good - via environment\nJWT_SECRET=strong-production-secret\nDATABASE_PASSWORD=secure-db-password\n\n# \u274c Bad - hardcoded in config file\njwt.secret: \"hardcoded-secret\"\n</code></pre></p> </li> <li> <p>Use strong JWT secrets (32+ characters):    <pre><code># \u2705 Good - 32+ characters\nJWT_SECRET=this-is-a-very-strong-jwt-secret-for-production-use-only\n\n# \u274c Bad - too short\nJWT_SECRET=secret123\n</code></pre></p> </li> <li> <p>Enable SSL for database connections:    <pre><code># \u2705 Good - SSL required\nDATABASE_SSLMODE=require\n\n# \u274c Bad - SSL disabled\nDATABASE_SSLMODE=disable\n</code></pre></p> </li> <li> <p>Use appropriate log levels:    <pre><code># \u2705 Good - production logging\nLOGGING_LEVEL=warn\n\n# \u274c Bad - too verbose in production\nLOGGING_LEVEL=debug\n</code></pre></p> </li> </ol>"},{"location":"CONFIGURATION/#environment-isolation","title":"Environment Isolation","text":"<ul> <li>Development: Use <code>config.development.yaml</code> + <code>.env</code></li> <li>Staging: Use <code>config.staging.yaml</code> + environment variables</li> <li>Production: Use <code>config.production.yaml</code> + secure environment variables</li> </ul>"},{"location":"CONFIGURATION/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"CONFIGURATION/#common-configuration-issues","title":"Common Configuration Issues","text":""},{"location":"CONFIGURATION/#1-configuration-not-loading","title":"1. Configuration Not Loading","text":"<p>Problem: Changes to config files not being applied.</p> <p>Solution: <pre><code># Check which config file is being loaded\nAPP_ENVIRONMENT=development go run cmd/server/main.go\n\n# Verify file exists\nls -la configs/config.development.yaml\n\n# Check environment variable\necho $APP_ENVIRONMENT\n</code></pre></p>"},{"location":"CONFIGURATION/#2-environment-variables-not-working","title":"2. Environment Variables Not Working","text":"<p>Problem: Environment variables not overriding config files.</p> <p>Solution: <pre><code># Check variable format (must use underscores)\nDATABASE_HOST=localhost  # \u2705 Correct\ndatabase.host=localhost  # \u274c Wrong\n\n# Check if .env file is loaded\ncat .env | grep DATABASE_HOST\n\n# Restart application after changes\nmake restart\n</code></pre></p>"},{"location":"CONFIGURATION/#3-validation-errors","title":"3. Validation Errors","text":"<p>Problem: Application fails to start with validation errors.</p> <p>Solutions:</p> <p>JWT Secret Missing: <pre><code># Error: JWT secret is required\nJWT_SECRET=your-secret-here\n\n# Production: minimum 32 characters required\nJWT_SECRET=this-is-a-32-character-secret-key\n</code></pre></p> <p>Database Password Missing in Production: <pre><code># Error: database.password is required in production\nDATABASE_PASSWORD=secure-password\n</code></pre></p> <p>Invalid SSL Mode in Production: <pre><code># Error: SSL mode cannot be 'disable' in production\nDATABASE_SSLMODE=require\n</code></pre></p>"},{"location":"CONFIGURATION/#4-port-already-in-use","title":"4. Port Already in Use","text":"<p>Problem: Server port is already occupied.</p> <p>Solution: <pre><code># Check what's using the port\nlsof -i :8080\n\n# Use different port\nSERVER_PORT=8081\n\n# Or kill the process\nlsof -ti:8080 | xargs kill -9\n</code></pre></p>"},{"location":"CONFIGURATION/#advanced-configuration","title":"\ud83d\udcda Advanced Configuration","text":""},{"location":"CONFIGURATION/#custom-configuration-loading","title":"Custom Configuration Loading","text":"<p>For advanced use cases, you can load configuration programmatically:</p> <pre><code>package main\n\nimport (\n    \"github.com/vahiiiid/go-rest-api-boilerplate/internal/config\"\n)\n\nfunc main() {\n    // Load from specific file\n    cfg, err := config.LoadConfig(\"/path/to/custom-config.yaml\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Load with environment detection\n    cfg, err = config.LoadConfig(\"\")  // Uses APP_ENVIRONMENT\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n</code></pre>"},{"location":"CONFIGURATION/#testing-configuration","title":"Testing Configuration","text":"<pre><code>// Use test helper for consistent test config\nfunc TestMyFunction(t *testing.T) {\n    cfg := config.NewTestConfig()\n    // cfg is now pre-configured for testing\n}\n</code></pre>"},{"location":"CONFIGURATION/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Setup Guide - Initial configuration setup</li> <li>Development Guide - Using config in code</li> <li>Docker Guide - Docker-specific configuration</li> <li>Quick Reference - Configuration commands</li> </ul>"},{"location":"CONTEXT_HELPERS/","title":"Context Helpers","text":"<p>The Context Helpers package provides type-safe, reusable functions for extracting user authentication information from Gin request contexts. This eliminates repetitive boilerplate code in handlers and provides a clean, maintainable approach to user authentication and authorization.</p>"},{"location":"CONTEXT_HELPERS/#overview","title":"\ud83c\udfaf Overview","text":"<p>The Context Helpers package (<code>internal/ctx</code>) offers a comprehensive set of functions that simplify user authentication and authorization in your handlers. Instead of manually extracting and validating JWT claims in every protected endpoint, you can use these helper functions for clean, readable, and maintainable code.</p>"},{"location":"CONTEXT_HELPERS/#key-benefits","title":"Key Benefits","text":"<ul> <li>\ud83d\udd04 DRY Principle: Eliminates code duplication across handlers</li> <li>\ud83d\udee1\ufe0f Type Safety: Built-in type assertions with proper error handling  </li> <li>\ud83e\uddea Testability: Comprehensive test coverage ensures reliability</li> <li>\ud83d\udcd6 Readability: Clean, self-documenting authentication code</li> <li>\u26a1 Performance: Optimized context extraction with minimal overhead</li> </ul>"},{"location":"CONTEXT_HELPERS/#available-functions","title":"\ud83d\udce6 Available Functions","text":""},{"location":"CONTEXT_HELPERS/#user-information-extraction","title":"User Information Extraction","text":""},{"location":"CONTEXT_HELPERS/#getuserc-gincontext-authclaims","title":"<code>GetUser(c *gin.Context) *auth.Claims</code>","text":"<p>Retrieves the complete authenticated user claims from context.</p> <pre><code>claims := ctx.GetUser(c)\nif claims != nil {\n    // User is authenticated\n    fmt.Printf(\"User ID: %d, Email: %s\\n\", claims.UserID, claims.Email)\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#mustgetuserc-gincontext-authclaims-error","title":"<code>MustGetUser(c *gin.Context) (*auth.Claims, error)</code>","text":"<p>Retrieves user claims or returns an error if not found.</p> <pre><code>claims, err := ctx.MustGetUser(c)\nif err != nil {\n    c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n    return\n}\n// Use claims safely\n</code></pre>"},{"location":"CONTEXT_HELPERS/#getuseridc-gincontext-uint","title":"<code>GetUserID(c *gin.Context) uint</code>","text":"<p>Extracts the authenticated user's ID from context. Returns <code>0</code> if not found.</p> <pre><code>userID := ctx.GetUserID(c)\nif userID == 0 {\n    c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n    return\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#mustgetuseridc-gincontext-uint-error","title":"<code>MustGetUserID(c *gin.Context) (uint, error)</code>","text":"<p>Gets user ID with error handling.</p> <pre><code>userID, err := ctx.MustGetUserID(c)\nif err != nil {\n    c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n    return\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#getemailc-gincontext-string","title":"<code>GetEmail(c *gin.Context) string</code>","text":"<p>Extracts the authenticated user's email address.</p> <pre><code>email := ctx.GetEmail(c)\nif email == \"\" {\n    c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n    return\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#getusernamec-gincontext-string","title":"<code>GetUserName(c *gin.Context) string</code>","text":"<p>Extracts the authenticated user's name.</p> <pre><code>userName := ctx.GetUserName(c)\nfmt.Printf(\"Welcome, %s!\\n\", userName)\n</code></pre>"},{"location":"CONTEXT_HELPERS/#authentication-authorization","title":"Authentication &amp; Authorization","text":""},{"location":"CONTEXT_HELPERS/#isauthenticatedc-gincontext-bool","title":"<code>IsAuthenticated(c *gin.Context) bool</code>","text":"<p>Checks if the request has valid authentication.</p> <pre><code>if !ctx.IsAuthenticated(c) {\n    c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n    return\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#canaccessuserc-gincontext-targetuserid-uint-bool","title":"<code>CanAccessUser(c *gin.Context, targetUserID uint) bool</code>","text":"<p>Checks if the authenticated user can access the target user's resources (ownership-based access control).</p> <pre><code>if !ctx.CanAccessUser(c, uint(id)) {\n    c.JSON(http.StatusForbidden, gin.H{\"error\": \"Forbidden\"})\n    return\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#hasrolec-gincontext-role-string-bool","title":"<code>HasRole(c *gin.Context, role string) bool</code>","text":"<p>Checks if the user has a specific role (placeholder for future RBAC implementation).</p> <pre><code>if !ctx.HasRole(c, \"admin\") {\n    c.JSON(http.StatusForbidden, gin.H{\"error\": \"Insufficient permissions\"})\n    return\n}\n</code></pre> <p>Future RBAC Support</p> <p>The <code>HasRole</code> function is currently a placeholder that returns <code>false</code>. It will be implemented when role-based access control is added to the system.</p>"},{"location":"CONTEXT_HELPERS/#code-transformation","title":"\ud83d\udd04 Code Transformation","text":""},{"location":"CONTEXT_HELPERS/#before-repetitive-boilerplate","title":"Before: Repetitive Boilerplate","text":"<p>Every protected handler required verbose authentication code:</p> <pre><code>func (h *Handler) GetUser(c *gin.Context) {\n    // Parse ID from URL\n    id, err := strconv.ParseUint(c.Param(\"id\"), 10, 32)\n    if err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid user ID\"})\n        return\n    }\n\n    // Extract user claims manually\n    claims, exists := c.Get(\"user\")\n    if !exists {\n        c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n        return\n    }\n    userClaims := claims.(*auth.Claims)\n\n    // Authorization check\n    if userClaims.UserID != uint(id) {\n        c.JSON(http.StatusForbidden, gin.H{\"error\": \"Forbidden\"})\n        return\n    }\n\n    // Actual handler logic...\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#after-clean-type-safe","title":"After: Clean &amp; Type-Safe","text":"<p>With Context Helpers, the same functionality becomes clean and readable:</p> <pre><code>func (h *Handler) GetUser(c *gin.Context) {\n    // Parse ID from URL\n    id, err := strconv.ParseUint(c.Param(\"id\"), 10, 32)\n    if err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid user ID\"})\n        return\n    }\n\n    // Clean authorization check\n    if !ctx.CanAccessUser(c, uint(id)) {\n        c.JSON(http.StatusForbidden, gin.H{\"error\": \"Forbidden\"})\n        return\n    }\n\n    // Actual handler logic...\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#impact-metrics","title":"\ud83d\udcca Impact Metrics","text":"Metric Before After Improvement Lines per handler 5-6 lines 1 line 83% reduction Type safety Manual assertions Built-in 100% safe Test coverage None 25+ tests Complete coverage Code duplication High Eliminated DRY principle"},{"location":"CONTEXT_HELPERS/#usage-examples","title":"\ud83d\udee0\ufe0f Usage Examples","text":""},{"location":"CONTEXT_HELPERS/#basic-authentication-check","title":"Basic Authentication Check","text":"<pre><code>func (h *Handler) ProtectedEndpoint(c *gin.Context) {\n    if !ctx.IsAuthenticated(c) {\n        c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Authentication required\"})\n        return\n    }\n\n    userID := ctx.GetUserID(c)\n    // Use userID safely\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#resource-ownership-validation","title":"Resource Ownership Validation","text":"<pre><code>func (h *Handler) UpdateUser(c *gin.Context) {\n    id, err := strconv.ParseUint(c.Param(\"id\"), 10, 32)\n    if err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid user ID\"})\n        return\n    }\n\n    // Check if user can access this resource\n    if !ctx.CanAccessUser(c, uint(id)) {\n        c.JSON(http.StatusForbidden, gin.H{\"error\": \"Access denied\"})\n        return\n    }\n\n    // Proceed with update...\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#user-information-display","title":"User Information Display","text":"<pre><code>func (h *Handler) GetProfile(c *gin.Context) {\n    user := ctx.GetUser(c)\n    if user == nil {\n        c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n        return\n    }\n\n    profile := gin.H{\n        \"id\":    user.UserID,\n        \"email\": user.Email,\n        \"name\":  user.Name,\n    }\n\n    c.JSON(http.StatusOK, profile)\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#error-handling-with-must-functions","title":"Error Handling with Must Functions","text":"<pre><code>func (h *Handler) StrictEndpoint(c *gin.Context) {\n    userID, err := ctx.MustGetUserID(c)\n    if err != nil {\n        c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Authentication required\"})\n        return\n    }\n\n    email, err := ctx.MustGetUser(c)\n    if err != nil {\n        c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"User information missing\"})\n        return\n    }\n\n    // Use userID and email safely\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#testing","title":"\ud83e\uddea Testing","text":"<p>The Context Helpers package includes comprehensive test coverage with 25+ unit tests covering:</p> <ul> <li>\u2705 Happy path scenarios: Valid user extraction</li> <li>\u2705 Edge cases: Missing authentication, invalid types</li> <li>\u2705 Error conditions: Malformed context data</li> <li>\u2705 Authorization logic: Access control validation</li> <li>\u2705 Type safety: Proper type assertions</li> </ul>"},{"location":"CONTEXT_HELPERS/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\ngo test ./tests/context_test.go -v\n\n# Run with coverage\ngo test ./tests/context_test.go -v -cover\n\n# Run all project tests\nmake test\n</code></pre>"},{"location":"CONTEXT_HELPERS/#integration","title":"\ud83d\udd27 Integration","text":""},{"location":"CONTEXT_HELPERS/#prerequisites","title":"Prerequisites","text":"<p>The Context Helpers require:</p> <ol> <li>JWT Authentication Middleware: Must be applied to protected routes</li> <li>Auth Claims Structure: Compatible with <code>internal/auth.Claims</code></li> <li>Context Key: Uses <code>auth.KeyUser</code> constant for context storage</li> </ol>"},{"location":"CONTEXT_HELPERS/#middleware-setup","title":"Middleware Setup","text":"<p>Ensure your routes are protected with the authentication middleware:</p> <pre><code>// In your router setup\nauthMiddleware := auth.NewMiddleware(authService)\nprotected := router.Group(\"/api/v1\")\nprotected.Use(authMiddleware)\n\n// Now handlers can use context helpers\nprotected.GET(\"/users/:id\", userHandler.GetUser)\n</code></pre>"},{"location":"CONTEXT_HELPERS/#best-practices","title":"\ud83d\ude80 Best Practices","text":""},{"location":"CONTEXT_HELPERS/#1-use-appropriate-functions","title":"1. Use Appropriate Functions","text":"<ul> <li>Safe functions (<code>GetUserID</code>, <code>GetEmail</code>) for optional user info</li> <li>Must functions (<code>MustGetUserID</code>, <code>MustGetUser</code>) when authentication is required</li> <li>Boolean checks (<code>IsAuthenticated</code>, <code>CanAccessUser</code>) for conditional logic</li> </ul>"},{"location":"CONTEXT_HELPERS/#2-consistent-error-handling","title":"2. Consistent Error Handling","text":"<pre><code>// Good: Consistent error responses\nif !ctx.IsAuthenticated(c) {\n    c.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n    return\n}\n\n// Good: Use appropriate HTTP status codes\nif !ctx.CanAccessUser(c, targetID) {\n    c.JSON(http.StatusForbidden, gin.H{\"error\": \"Forbidden\"})\n    return\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#3-combine-with-validation","title":"3. Combine with Validation","text":"<pre><code>func (h *Handler) UpdateUser(c *gin.Context) {\n    // Input validation\n    id, err := strconv.ParseUint(c.Param(\"id\"), 10, 32)\n    if err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid user ID\"})\n        return\n    }\n\n    // Authentication &amp; authorization\n    if !ctx.CanAccessUser(c, uint(id)) {\n        c.JSON(http.StatusForbidden, gin.H{\"error\": \"Forbidden\"})\n        return\n    }\n\n    // Business logic validation\n    var req UpdateRequest\n    if err := c.ShouldBindJSON(&amp;req); err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n        return\n    }\n\n    // Proceed with update...\n}\n</code></pre>"},{"location":"CONTEXT_HELPERS/#future-enhancements","title":"\ud83d\udd2e Future Enhancements","text":"<p>The Context Helpers package is designed for extensibility:</p> <ul> <li>Role-Based Access Control (RBAC): <code>HasRole</code> function ready for implementation</li> <li>Permission System: Extensible for complex permission checks</li> <li>Multi-tenant Support: Ready for tenant-based access control</li> <li>Audit Logging: Easy integration with user context information</li> </ul>"},{"location":"CONTEXT_HELPERS/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Authentication Guide - JWT authentication setup</li> <li>Middleware Documentation - Request processing pipeline</li> <li>Testing Guide - Comprehensive testing strategies</li> <li>API Documentation - Complete API reference</li> </ul> <p>The Context Helpers package transforms authentication code from repetitive boilerplate into clean, maintainable, and testable functions. By eliminating code duplication and providing type-safe user extraction, it significantly improves developer experience and code quality.</p>"},{"location":"DEVELOPMENT_GUIDE/","title":"\ud83d\udee0\ufe0f Development Guide","text":"<p>A comprehensive guide to understanding the codebase and building new features.</p>"},{"location":"DEVELOPMENT_GUIDE/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":"<ul> <li>Architecture Overview</li> <li>Configuration System</li> <li>Directory Structure</li> <li>Understanding the Layers</li> <li>How User Management Works</li> <li>Adding New Features</li> <li>Best Practices</li> <li>Common Patterns</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<p>This project follows Clean Architecture principles with clear separation of concerns:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    HTTP Layer                           \u2502\n\u2502  (Handlers - Receive requests, return responses)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Business Layer                        \u2502\n\u2502  (Services - Business logic, orchestration)             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Data Layer                            \u2502\n\u2502  (Repositories - Database operations)                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Database                             \u2502\n\u2502  (PostgreSQL - Data storage)                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#key-principles","title":"Key Principles","text":"<ol> <li>Separation of Concerns - Each layer has one responsibility</li> <li>Dependency Injection - Dependencies flow inward</li> <li>Interface-Based - Layers communicate through interfaces</li> <li>Testable - Each layer can be tested independently</li> <li>Maintainable - Easy to understand and modify</li> </ol>"},{"location":"DEVELOPMENT_GUIDE/#configuration-system","title":"\u2699\ufe0f Configuration System","text":"<p>The application uses a Viper-based configuration system with layered precedence for flexibility and security.</p>"},{"location":"DEVELOPMENT_GUIDE/#configuration-architecture","title":"Configuration Architecture","text":"<pre><code>Environment Variables (.env)          &lt;-- Highest Priority\n        \u2193 (overrides)\nEnvironment Config (config.{env}.yaml)\n        \u2193 (overrides)  \nBase Config (config.yaml)\n        \u2193 (overrides)\nDefault Values (hardcoded)            &lt;-- Lowest Priority\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#using-configuration-in-code","title":"Using Configuration in Code","text":"<p>Step 1: Load configuration in main.go</p> <pre><code>package main\n\nimport (\n    \"github.com/vahiiiid/go-rest-api-boilerplate/internal/config\"\n)\n\nfunc main() {\n    // Load configuration using Viper\n    cfg, err := config.LoadConfig(\"\") // Auto-detects environment\n    if err != nil {\n        log.Fatalf(\"Failed to load config: %v\", err)\n    }\n\n    // Pass typed config to services\n    authService := auth.NewService(&amp;cfg.JWT)\n    database, err := db.NewPostgresDBFromDatabaseConfig(cfg.Database)\n    // ...\n}\n</code></pre> <p>Step 2: Inject configuration into services</p> <pre><code>// Before (manual env reads)\nfunc NewService() Service {\n    secret := os.Getenv(\"JWT_SECRET\") // \u274c Direct env access\n    // ...\n}\n\n// After (typed config injection)\nfunc NewService(cfg *config.JWTConfig) Service {\n    secret := cfg.Secret // \u2705 Type-safe access\n    ttl := time.Duration(cfg.TTLHours) * time.Hour\n    // ...\n}\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#configuration-validation","title":"Configuration Validation","text":"<p>The config system includes automatic validation:</p> <pre><code>// Production validations automatically applied\nfunc (c *Config) Validate() error {\n    if c.JWT.Secret == \"\" {\n        return fmt.Errorf(\"JWT secret is required\")\n    }\n\n    if c.App.Environment == \"production\" {\n        if len(c.JWT.Secret) &lt; 32 {\n            return fmt.Errorf(\"JWT secret must be 32+ chars in production\")\n        }\n        if c.Database.SSLMode == \"disable\" {\n            return fmt.Errorf(\"SSL required in production\")\n        }\n    }\n    return nil\n}\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#testing-configuration","title":"Testing Configuration","text":"<p>Use the test helper for consistent test configs:</p> <pre><code>func TestUserService(t *testing.T) {\n    // Get pre-configured test config\n    cfg := config.NewTestConfig()\n\n    // Override specific values if needed\n    cfg.JWT.TTLHours = 1\n\n    service := NewService(&amp;cfg.JWT)\n    // ... test with consistent config\n}\n</code></pre> <p>\ud83d\udcd6 Complete configuration reference: Configuration Guide</p>"},{"location":"DEVELOPMENT_GUIDE/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>internal/\n\u251c\u2500\u2500 auth/                   # Authentication &amp; Authorization\n\u2502   \u251c\u2500\u2500 dto.go             # JWT Claims\n\u2502   \u251c\u2500\u2500 service.go         # Token generation/validation\n\u2502   \u2514\u2500\u2500 middleware.go      # Auth middleware for routes\n\u2502\n\u251c\u2500\u2500 config/                 # Configuration Management (Viper-based)\n\u2502   \u251c\u2500\u2500 config.go          # Config structs, Viper loading, and validation\n\u2502   \u251c\u2500\u2500 config_test.go     # Comprehensive configuration tests\n\u2502   \u251c\u2500\u2500 testing.go         # Test configuration helper\n\u2502   \u2514\u2500\u2500 validator.go       # Configuration validation rules\n\u2502\n\u251c\u2500\u2500 db/                     # Database Connection\n\u2502   \u2514\u2500\u2500 db.go              # PostgreSQL connection setup\n\u2502\n\u251c\u2500\u2500 middleware/             # HTTP Middleware\n\u2502   \u251c\u2500\u2500 logger.go          # Request logging middleware\n\u2502   \u251c\u2500\u2500 logger_test.go     # Logger middleware tests\n\u2502   \u2514\u2500\u2500 README.md          # Middleware documentation\n\u2502\n\u251c\u2500\u2500 server/                 # Server &amp; Routing\n\u2502   \u2514\u2500\u2500 router.go          # Route definitions\n\u2502\n\u2514\u2500\u2500 user/                   # User Domain (Example Feature)\n    \u251c\u2500\u2500 model.go           # Database model (GORM)\n    \u251c\u2500\u2500 dto.go             # Request/Response objects\n    \u251c\u2500\u2500 repository.go      # Database operations\n    \u251c\u2500\u2500 service.go         # Business logic\n    \u2514\u2500\u2500 handler.go         # HTTP handlers\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#file-responsibilities","title":"File Responsibilities","text":"File Purpose Contains <code>model.go</code> Database schema GORM models with tags <code>dto.go</code> Data transfer Request/Response structs <code>repository.go</code> Data access CRUD operations <code>service.go</code> Business logic Validation, orchestration <code>handler.go</code> HTTP layer Route handlers, Swagger docs"},{"location":"DEVELOPMENT_GUIDE/#understanding-the-layers","title":"\ud83d\udd0d Understanding the Layers","text":""},{"location":"DEVELOPMENT_GUIDE/#1-model-layer-modelgo","title":"1. Model Layer (<code>model.go</code>)","text":"<p>Purpose: Define database schema using GORM</p> <p>Example: <pre><code>package user\n\nimport (\n    \"gorm.io/gorm\"\n    \"time\"\n)\n\ntype User struct {\n    ID           uint           `gorm:\"primaryKey\" json:\"id\"`\n    Name         string         `gorm:\"not null\" json:\"name\"`\n    Email        string         `gorm:\"uniqueIndex;not null\" json:\"email\"`\n    PasswordHash string         `gorm:\"not null\" json:\"-\"`\n    CreatedAt    time.Time      `json:\"created_at\"`\n    UpdatedAt    time.Time      `json:\"updated_at\"`\n    DeletedAt    gorm.DeletedAt `gorm:\"index\" json:\"-\"`\n}\n</code></pre></p> <p>Key Points: - Use GORM tags for database constraints - Use JSON tags for API responses - Use <code>json:\"-\"</code> to hide sensitive fields - <code>gorm.DeletedAt</code> enables soft deletes</p>"},{"location":"DEVELOPMENT_GUIDE/#2-dto-layer-dtogo","title":"2. DTO Layer (<code>dto.go</code>)","text":"<p>Purpose: Define request/response structures</p> <p>Example: <pre><code>package user\n\ntype RegisterRequest struct {\n    Name     string `json:\"name\" binding:\"required,min=2\"`\n    Email    string `json:\"email\" binding:\"required,email\"`\n    Password string `json:\"password\" binding:\"required,min=6\"`\n}\n\ntype UserResponse struct {\n    ID        uint      `json:\"id\"`\n    Name      string    `json:\"name\"`\n    Email     string    `json:\"email\"`\n    CreatedAt time.Time `json:\"created_at\"`\n}\n\ntype ErrorResponse struct {\n    Error string `json:\"error\"`\n}\n</code></pre></p> <p>Key Points: - Use <code>binding</code> tags for validation - Never expose <code>PasswordHash</code> in responses - Create separate structs for requests/responses - Use clear, descriptive names</p>"},{"location":"DEVELOPMENT_GUIDE/#3-repository-layer-repositorygo","title":"3. Repository Layer (<code>repository.go</code>)","text":"<p>Purpose: Handle all database operations</p> <p>Example: <pre><code>package user\n\nimport (\n    \"gorm.io/gorm\"\n)\n\ntype UserRepository interface {\n    Create(user *User) error\n    FindByID(id uint) (*User, error)\n    FindByEmail(email string) (*User, error)\n    List() ([]User, error)\n    Update(user *User) error\n    Delete(id uint) error\n}\n\ntype GormUserRepository struct {\n    db *gorm.DB\n}\n\nfunc NewRepository(db *gorm.DB) UserRepository {\n    return &amp;GormUserRepository{db: db}\n}\n\nfunc (r *GormUserRepository) Create(user *User) error {\n    return r.db.Create(user).Error\n}\n\nfunc (r *GormUserRepository) FindByID(id uint) (*User, error) {\n    var user User\n    if err := r.db.First(&amp;user, id).Error; err != nil {\n        return nil, err\n    }\n    return &amp;user, nil\n}\n\n// ... more methods\n</code></pre></p> <p>Key Points: - Define interface first - Use GORM methods for queries - Always check for errors - Return appropriate GORM errors</p>"},{"location":"DEVELOPMENT_GUIDE/#4-service-layer-servicego","title":"4. Service Layer (<code>service.go</code>)","text":"<p>Purpose: Implement business logic and orchestration</p> <p>Example: <pre><code>package user\n\nimport (\n    \"errors\"\n    \"golang.org/x/crypto/bcrypt\"\n)\n\ntype UserService struct {\n    repo UserRepository\n}\n\nfunc NewService(repo UserRepository) *UserService {\n    return &amp;UserService{repo: repo}\n}\n\nfunc (s *UserService) RegisterUser(req RegisterRequest) (*User, error) {\n    // Check if user exists\n    existing, _ := s.repo.FindByEmail(req.Email)\n    if existing != nil {\n        return nil, errors.New(\"email already exists\")\n    }\n\n    // Hash password\n    hash, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)\n    if err != nil {\n        return nil, err\n    }\n\n    // Create user\n    user := &amp;User{\n        Name:         req.Name,\n        Email:        req.Email,\n        PasswordHash: string(hash),\n    }\n\n    if err := s.repo.Create(user); err != nil {\n        return nil, err\n    }\n\n    return user, nil\n}\n\n// ... more methods\n</code></pre></p> <p>Key Points: - Validate business rules - Orchestrate repository calls - Handle errors appropriately - Keep logic testable</p>"},{"location":"DEVELOPMENT_GUIDE/#5-handler-layer-handlergo","title":"5. Handler Layer (<code>handler.go</code>)","text":"<p>Purpose: Handle HTTP requests and responses</p> <p>Example: <pre><code>package user\n\nimport (\n    \"net/http\"\n    \"github.com/gin-gonic/gin\"\n)\n\ntype UserHandler struct {\n    service     *UserService\n    authService *auth.AuthService\n}\n\nfunc NewHandler(service *UserService, authService *auth.AuthService) *UserHandler {\n    return &amp;UserHandler{\n        service:     service,\n        authService: authService,\n    }\n}\n\n// @Summary Register a new user\n// @Description Create a new user account\n// @Tags auth\n// @Accept json\n// @Produce json\n// @Param user body RegisterRequest true \"User registration data\"\n// @Success 200 {object} TokenResponse\n// @Failure 400 {object} ErrorResponse\n// @Router /api/v1/auth/register [post]\nfunc (h *UserHandler) Register(c *gin.Context) {\n    var req RegisterRequest\n\n    // Bind and validate request\n    if err := c.ShouldBindJSON(&amp;req); err != nil {\n        c.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    // Call service\n    user, err := h.service.RegisterUser(req)\n    if err != nil {\n        c.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    // Generate token\n    token, err := h.authService.GenerateToken(user.ID)\n    if err != nil {\n        c.JSON(http.StatusInternalServerError, ErrorResponse{Error: \"Failed to generate token\"})\n        return\n    }\n\n    // Return response\n    c.JSON(http.StatusOK, TokenResponse{\n        Token: token,\n        User:  toUserResponse(user),\n    })\n}\n</code></pre></p> <p>Key Points: - Bind request data with validation - Call service layer - Return appropriate HTTP status codes - Add Swagger annotations - Keep handlers thin</p>"},{"location":"DEVELOPMENT_GUIDE/#how-user-management-works","title":"\ud83d\udc64 How User Management Works","text":"<p>Let's trace a registration request through all layers:</p>"},{"location":"DEVELOPMENT_GUIDE/#request-flow","title":"Request Flow","text":"<pre><code>1. HTTP Request\n   POST /api/v1/auth/register\n   Body: {\"name\": \"Alice\", \"email\": \"alice@example.com\", \"password\": \"secret123\"}\n\n   \u2193\n\n2. Handler (handler.go)\n   - Binds JSON to RegisterRequest\n   - Validates using binding tags\n   - Calls service.RegisterUser()\n\n   \u2193\n\n3. Service (service.go)\n   - Checks if email already exists (calls repo.FindByEmail)\n   - Hashes password with bcrypt\n   - Creates User model\n   - Calls repo.Create()\n\n   \u2193\n\n4. Repository (repository.go)\n   - Executes GORM Create\n   - Inserts into database\n   - Returns user with ID\n\n   \u2193\n\n5. Back to Service\n   - Returns user to handler\n\n   \u2193\n\n6. Back to Handler\n   - Generates JWT token\n   - Converts user to UserResponse\n   - Returns JSON response\n\n   \u2193\n\n7. HTTP Response\n   {\"token\": \"eyJ...\", \"user\": {\"id\": 1, \"name\": \"Alice\", ...}}\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#authentication-flow","title":"Authentication Flow","text":"<p>Protected endpoints use middleware:</p> <pre><code>1. Request with Header\n   Authorization: Bearer eyJhbGc...\n\n   \u2193\n\n2. Auth Middleware (auth/middleware.go)\n   - Extracts token from header\n   - Validates JWT signature\n   - Parses claims (user ID)\n   - Sets user ID in context\n\n   \u2193\n\n3. Handler\n   - Gets user ID from context\n   - Proceeds with business logic\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#adding-new-features","title":"\ud83d\ude80 Adding New Features","text":"<p>Follow these steps to add a new feature:</p>"},{"location":"DEVELOPMENT_GUIDE/#step-by-step-checklist","title":"Step-by-Step Checklist","text":"<ul> <li> 1. Create domain directory in <code>internal/</code></li> <li> 2. Define model (<code>model.go</code>)</li> <li> 3. Create migration files</li> <li> 4. Define DTOs (<code>dto.go</code>)</li> <li> 5. Create repository interface and implementation (<code>repository.go</code>)</li> <li> 6. Implement business logic (<code>service.go</code>)</li> <li> 7. Create HTTP handlers with Swagger docs (<code>handler.go</code>)</li> <li> 8. Register routes in <code>router.go</code></li> <li> 9. Update <code>main.go</code> for migrations</li> <li> 10. Write tests</li> <li> 11. Update API documentation</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"DEVELOPMENT_GUIDE/#1-error-handling","title":"1. Error Handling","text":"<p>DO: <pre><code>if err != nil {\n    if errors.Is(err, gorm.ErrRecordNotFound) {\n        return nil, errors.New(\"resource not found\")\n    }\n    return nil, fmt.Errorf(\"database error: %w\", err)\n}\n</code></pre></p> <p>DON'T: <pre><code>if err != nil {\n    panic(err)  // Never panic in production code\n}\n</code></pre></p>"},{"location":"DEVELOPMENT_GUIDE/#2-validation","title":"2. Validation","text":"<p>Always validate at multiple layers: - DTO level - Use binding tags - Service level - Business rules - Database level - Constraints</p>"},{"location":"DEVELOPMENT_GUIDE/#3-security","title":"3. Security","text":"<p>Always: - \u2705 Hash passwords with bcrypt - \u2705 Validate JWT tokens - \u2705 Check ownership before operations - \u2705 Use parameterized queries (GORM does this) - \u2705 Never expose sensitive data in responses</p>"},{"location":"DEVELOPMENT_GUIDE/#4-testing","title":"4. Testing","text":"<p>Test each layer: <pre><code>// Repository test (use test database)\nfunc TestCreateTodo(t *testing.T) {\n    db := setupTestDB()\n    repo := NewRepository(db)\n\n    todo := &amp;Todo{Title: \"Test\", UserID: 1}\n    err := repo.Create(todo)\n\n    assert.NoError(t, err)\n    assert.NotZero(t, todo.ID)\n}\n\n// Service test (mock repository)\nfunc TestCreateTodo_Service(t *testing.T) {\n    mockRepo := &amp;MockTodoRepository{}\n    service := NewService(mockRepo)\n\n    mockRepo.On(\"Create\", mock.Anything).Return(nil)\n\n    todo, err := service.CreateTodo(1, CreateTodoRequest{Title: \"Test\"})\n\n    assert.NoError(t, err)\n    assert.NotNil(t, todo)\n}\n\n// Handler test (use httptest)\nfunc TestCreateTodoHandler(t *testing.T) {\n    gin.SetMode(gin.TestMode)\n    router := gin.New()\n    handler := NewHandler(mockService)\n\n    router.POST(\"/todos\", handler.CreateTodo)\n\n    req := httptest.NewRequest(\"POST\", \"/todos\", body)\n    rec := httptest.NewRecorder()\n\n    router.ServeHTTP(rec, req)\n\n    assert.Equal(t, http.StatusCreated, rec.Code)\n}\n</code></pre></p>"},{"location":"DEVELOPMENT_GUIDE/#5-logging","title":"5. Logging","text":"<p>Add structured logging: <pre><code>import \"log\"\n\nfunc (s *TodoService) CreateTodo(userID uint, req CreateTodoRequest) (*Todo, error) {\n    log.Printf(\"Creating todo for user %d: %s\", userID, req.Title)\n\n    // ... business logic ...\n\n    log.Printf(\"Todo created successfully: %d\", todo.ID)\n    return todo, nil\n}\n</code></pre></p>"},{"location":"DEVELOPMENT_GUIDE/#common-patterns","title":"\ud83d\udd04 Common Patterns","text":""},{"location":"DEVELOPMENT_GUIDE/#pagination","title":"Pagination","text":"<pre><code>type PaginationParams struct {\n    Page  int `form:\"page\" binding:\"min=1\"`\n    Limit int `form:\"limit\" binding:\"min=1,max=100\"`\n}\n\nfunc (r *GormTodoRepository) FindByUserIDPaginated(userID uint, params PaginationParams) ([]Todo, int64, error) {\n    var todos []Todo\n    var total int64\n\n    offset := (params.Page - 1) * params.Limit\n\n    // Count total\n    r.db.Model(&amp;Todo{}).Where(\"user_id = ?\", userID).Count(&amp;total)\n\n    // Get paginated results\n    err := r.db.Where(\"user_id = ?\", userID).\n        Offset(offset).\n        Limit(params.Limit).\n        Order(\"created_at DESC\").\n        Find(&amp;todos).Error\n\n    return todos, total, err\n}\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#filtering","title":"Filtering","text":"<pre><code>type TodoFilter struct {\n    Completed *bool  `form:\"completed\"`\n    Search    string `form:\"search\"`\n}\n\nfunc (r *GormTodoRepository) FindWithFilter(userID uint, filter TodoFilter) ([]Todo, error) {\n    query := r.db.Where(\"user_id = ?\", userID)\n\n    if filter.Completed != nil {\n        query = query.Where(\"completed = ?\", *filter.Completed)\n    }\n\n    if filter.Search != \"\" {\n        query = query.Where(\"title ILIKE ?\", \"%\"+filter.Search+\"%\")\n    }\n\n    var todos []Todo\n    err := query.Find(&amp;todos).Error\n    return todos, err\n}\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#batch-operations","title":"Batch Operations","text":"<pre><code>func (s *TodoService) MarkAllCompleted(userID uint) error {\n    return s.repo.db.\n        Model(&amp;Todo{}).\n        Where(\"user_id = ? AND completed = ?\", userID, false).\n        Update(\"completed\", true).\n        Error\n}\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#transactions","title":"Transactions","text":"<pre><code>func (s *TodoService) BulkCreate(userID uint, todos []CreateTodoRequest) error {\n    return s.repo.db.Transaction(func(tx *gorm.DB) error {\n        for _, req := range todos {\n            todo := &amp;Todo{\n                Title:  req.Title,\n                UserID: userID,\n            }\n            if err := tx.Create(todo).Error; err != nil {\n                return err // Rollback\n            }\n        }\n        return nil // Commit\n    })\n}\n</code></pre>"},{"location":"DEVELOPMENT_GUIDE/#additional-resources","title":"\ud83d\udcda Additional Resources","text":""},{"location":"DEVELOPMENT_GUIDE/#gorm-documentation","title":"GORM Documentation","text":"<ul> <li>GORM Guide</li> <li>Associations</li> <li>Hooks</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/#gin-documentation","title":"Gin Documentation","text":"<ul> <li>Gin Framework</li> <li>Binding and Validation</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/#swagger","title":"Swagger","text":"<ul> <li>Swaggo</li> <li>Swagger Spec</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/#testing","title":"Testing","text":"<ul> <li>Testify</li> <li>Go Testing</li> </ul>"},{"location":"DEVELOPMENT_GUIDE/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<p>If you're stuck:</p> <ol> <li>Check the example implementations in <code>internal/user/</code></li> <li>Review this guide</li> <li>Check GORM/Gin documentation</li> <li>Look at the tests in <code>tests/</code></li> <li>Open an issue on GitHub</li> </ol>"},{"location":"DEVELOPMENT_GUIDE/#checklist-for-new-features","title":"\u2705 Checklist for New Features","text":"<p>Before considering your feature complete:</p> <ul> <li> Model defined with proper GORM tags</li> <li> Migration files created (up and down)</li> <li> DTOs defined with validation tags</li> <li> Repository interface and implementation</li> <li> Service with business logic</li> <li> Handlers with Swagger annotations</li> <li> Routes registered in router</li> <li> Migration added to main.go</li> <li> Tests written for all layers</li> <li> Swagger docs regenerated</li> <li> API tested with curl/Postman</li> <li> Error cases handled</li> <li> Logging added</li> <li> Documentation updated</li> </ul> <p>Happy Coding! \ud83d\ude80</p> <p>Remember: Start simple, test often, and refactor as needed. The architecture supports growth and change!</p>"},{"location":"DOCKER/","title":"\ud83d\udc33 Docker Setup Guide","text":"<p>This project supports both development and production Docker configurations.</p>"},{"location":"DOCKER/#overview","title":"\ud83d\udccb Overview","text":"<p>The project uses multi-stage Dockerfile with two targets:</p> <ol> <li>Development - Hot-reload with code sync</li> <li>Production - Optimized minimal image</li> </ol>"},{"location":"DOCKER/#development-setup-hot-reload","title":"\ud83d\udd27 Development Setup (Hot-Reload)","text":""},{"location":"DOCKER/#features","title":"Features","text":"<ul> <li>\u2705 Hot-reload - Changes reflect instantly</li> <li>\u2705 Volume mounting - Edit code in IDE, see changes in container</li> <li>\u2705 Air - Automatic rebuild on file changes</li> <li>\u2705 Internal networking - Database not exposed to host</li> </ul>"},{"location":"DOCKER/#quick-start","title":"Quick Start","text":"<pre><code># Start development environment\ndocker-compose up --build\n\n# Or using make\nmake docker-up\n</code></pre>"},{"location":"DOCKER/#what-happens","title":"What Happens","text":"<ol> <li>Mounts your local code into <code>/app</code> in container</li> <li>Uses Air for hot-reload</li> <li>PostgreSQL accessible only via Docker network name <code>db</code></li> <li>Changes in your IDE automatically trigger rebuild</li> </ol>"},{"location":"DOCKER/#development-architecture","title":"Development Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Your IDE (Local Filesystem)      \u2502\n\u2502   Edit: internal/user/handler.go   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502 Volume Mount\n               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Docker Container (app)            \u2502\n\u2502   Air detects change \u2192 Rebuild      \u2502\n\u2502   \u2192 Restart server                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502 Docker Network\n               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   PostgreSQL Container (db)         \u2502\n\u2502   Only accessible via 'db' hostname \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"DOCKER/#configuration-files","title":"Configuration Files","text":"<ul> <li>Dockerfile - <code>target: development</code> stage</li> <li>docker-compose.yml - Development config with volumes</li> <li>.air.toml - Hot-reload configuration</li> </ul>"},{"location":"DOCKER/#excluded-from-hot-reload","title":"Excluded from Hot-Reload","text":"<ul> <li><code>tmp/</code> directory (build artifacts)</li> <li><code>*_test.go</code> files</li> <li><code>vendor/</code> directory</li> <li><code>api/docs/</code> directory</li> </ul>"},{"location":"DOCKER/#production-setup","title":"\ud83d\ude80 Production Setup","text":""},{"location":"DOCKER/#features_1","title":"Features","text":"<ul> <li>\u2705 Minimal image - ~10-15MB final image</li> <li>\u2705 No volumes - Code baked into image</li> <li>\u2705 Optimized build - Multi-stage with stripped binary</li> <li>\u2705 Secure - No development tools</li> <li>\u2705 Internal networking - Database not exposed</li> </ul>"},{"location":"DOCKER/#quick-start_1","title":"Quick Start","text":"<pre><code># Start production environment\ndocker-compose -f docker-compose.prod.yml up --build\n\n# Or using make\nmake docker-up-prod\n</code></pre>"},{"location":"DOCKER/#production-architecture","title":"Production Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Docker Image (Production)         \u2502\n\u2502   - Compiled binary only            \u2502\n\u2502   - Alpine base (~5MB)              \u2502\n\u2502   - No source code                  \u2502\n\u2502   - No development tools            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502 Docker Network\n               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   PostgreSQL Container (db)         \u2502\n\u2502   Only accessible via 'db' hostname \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"DOCKER/#configuration-files_1","title":"Configuration Files","text":"<ul> <li>Dockerfile - <code>target: production</code> stage</li> <li>docker-compose.prod.yml - Production config without volumes</li> </ul>"},{"location":"DOCKER/#key-differences","title":"\ud83d\udd00 Key Differences","text":"Aspect Development Production Dockerfile Stage <code>development</code> <code>production</code> Base Image golang:1.24-alpine alpine:latest Code Location Volume mounted Baked in image Hot-Reload \u2705 Yes (Air) \u274c No Image Size ~800MB ~15MB Build Time Fast (cached) Slower (full build) Security Dev tools included Minimal surface DB Port Not exposed Not exposed"},{"location":"DOCKER/#networking","title":"\ud83c\udf10 Networking","text":""},{"location":"DOCKER/#internal-communication","title":"Internal Communication","text":"<p>Both setups use Docker's internal network:</p> <pre><code>networks:\n  go_api_network:\n    driver: bridge\n</code></pre> <p>App connects to DB using: <code>DB_HOST=db</code> (Docker service name)</p> <p>PostgreSQL port: Only exposed within Docker network, NOT to host</p>"},{"location":"DOCKER/#why-this-matters","title":"Why This Matters","text":"<p>\u2705 Security: Database not accessible from host machine \u2705 Portability: Works the same in dev/prod/CI \u2705 Isolation: Clean separation of concerns \u2705 Best Practice: Follows Docker networking patterns  </p>"},{"location":"DOCKER/#accessing-postgresql-if-needed","title":"Accessing PostgreSQL (if needed)","text":"<p>If you need to access PostgreSQL from host for debugging:</p> <pre><code># Option 1: Exec into container\ndocker exec -it go_api_db psql -U postgres -d go_api\n\n# Option 2: Temporarily expose port (edit docker-compose.yml)\n# Add under db service:\n# ports:\n#   - \"5432:5432\"\n</code></pre>"},{"location":"DOCKER/#common-commands","title":"\ud83d\udcdd Common Commands","text":""},{"location":"DOCKER/#development","title":"Development","text":"<pre><code># Start with logs\ndocker-compose up\n\n# Start in background\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f app\n\n# Restart app only (after config change)\ndocker-compose restart app\n\n# Rebuild after dependency change\ndocker-compose up --build\n\n# Stop everything\ndocker-compose down\n\n# Stop and remove volumes\ndocker-compose down -v\n</code></pre>"},{"location":"DOCKER/#production","title":"Production","text":"<pre><code># Start production\ndocker-compose -f docker-compose.prod.yml up --build\n\n# Start in background\ndocker-compose -f docker-compose.prod.yml up -d\n\n# View logs\ndocker-compose -f docker-compose.prod.yml logs -f\n\n# Stop production\ndocker-compose -f docker-compose.prod.yml down\n</code></pre>"},{"location":"DOCKER/#makefile-shortcuts","title":"Makefile Shortcuts","text":"<pre><code>make docker-up          # Development\nmake docker-up-prod     # Production\nmake docker-down        # Stop development\nmake docker-down-prod   # Stop production\n</code></pre>"},{"location":"DOCKER/#development-workflow","title":"\ud83d\udee0\ufe0f Development Workflow","text":""},{"location":"DOCKER/#1-start-environment","title":"1. Start Environment","text":"<pre><code>docker-compose up\n</code></pre>"},{"location":"DOCKER/#2-edit-code","title":"2. Edit Code","text":"<p>Open your IDE and edit any Go file: - <code>internal/user/handler.go</code> - <code>internal/auth/service.go</code> - etc.</p>"},{"location":"DOCKER/#3-see-changes","title":"3. See Changes","text":"<p>Air automatically detects changes and rebuilds:</p> <pre><code>[Air] 2024/01/01 - 12:00:00 main.go has changed\n[Air] Building...\n[Air] Build finished\n[Air] Restarting...\nServer starting on :8080\n</code></pre>"},{"location":"DOCKER/#4-test-api","title":"4. Test API","text":"<pre><code>curl http://localhost:8080/health\n</code></pre> <p>Changes are immediately reflected!</p>"},{"location":"DOCKER/#environment-variables","title":"\ud83d\udd12 Environment Variables","text":"<p>The application uses a Viper-based configuration system with updated environment variable names.</p>"},{"location":"DOCKER/#development_1","title":"Development","text":"<p>Set in <code>docker-compose.yml</code> or use <code>.env</code> file:</p> <pre><code># App Configuration\nAPP_ENVIRONMENT=development\nAPP_DEBUG=true\n\n# Database Configuration (updated variable names)\nDATABASE_HOST=db  # Docker service name\nDATABASE_PORT=5432\nDATABASE_USER=postgres\nDATABASE_PASSWORD=postgres\nDATABASE_NAME=grab\nDATABASE_SSLMODE=disable\n\n# JWT Configuration\nJWT_SECRET=dev-secret-for-development-only\nJWT_TTLHOURS=24\n\n# Server Configuration\nSERVER_PORT=8080\n</code></pre>"},{"location":"DOCKER/#production_1","title":"Production","text":"<p>Set in <code>docker-compose.prod.yml</code> or use <code>.env</code> file:</p> <pre><code># App Configuration\nAPP_ENVIRONMENT=production\nAPP_DEBUG=false\n\n# Database Configuration\nDATABASE_HOST=db  # Docker service name\nDATABASE_PASSWORD=STRONG_DB_PASSWORD\nDATABASE_SSLMODE=require\n\n# JWT Configuration (must be 32+ characters)\nJWT_SECRET=this-is-a-very-strong-production-jwt-secret-32-chars-minimum\nJWT_TTLHOURS=1\n\n# Rate Limiting (optional)\nRATELIMIT_ENABLED=true\nRATELIMIT_REQUESTS=60\nRATELIMIT_WINDOW=1m\n</code></pre> <p>\u26a0\ufe0f Important Changes: - Variable names changed: <code>DB_*</code> \u2192 <code>DATABASE_*</code> - JWT secret must be 32+ characters in production - SSL mode enforced in production - See Configuration Guide for complete reference</p> <p>\u26a0\ufe0f Never commit production secrets!</p>"},{"location":"DOCKER/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"DOCKER/#hot-reload-not-working","title":"Hot-Reload Not Working","text":"<pre><code># Check Air is running\ndocker-compose logs app | grep Air\n\n# Verify volume mount\ndocker-compose exec app ls -la /app\n\n# Restart the service\ndocker-compose restart app\n</code></pre>"},{"location":"DOCKER/#database-connection-error","title":"Database Connection Error","text":"<pre><code># Check DB is running\ndocker-compose ps\n\n# Check DB logs\ndocker-compose logs db\n\n# Verify DATABASE_HOST=db in environment  \ndocker-compose exec app env | grep DATABASE_HOST\n</code></pre>"},{"location":"DOCKER/#permission-issues","title":"Permission Issues","text":"<pre><code># macOS/Linux: Fix tmp/ directory permissions\nsudo chown -R $USER:$USER tmp/\n\n# Or remove and recreate\nrm -rf tmp/\n</code></pre>"},{"location":"DOCKER/#build-issues","title":"Build Issues","text":"<pre><code># Clean rebuild\ndocker-compose down\ndocker-compose build --no-cache\ndocker-compose up\n</code></pre>"},{"location":"DOCKER/#performance-tips","title":"\ud83d\udcca Performance Tips","text":""},{"location":"DOCKER/#development_2","title":"Development","text":"<ul> <li>Use <code>.dockerignore</code> to exclude unnecessary files</li> <li>Keep <code>tmp/</code> in .gitignore</li> <li>Don't mount large directories unnecessarily</li> </ul>"},{"location":"DOCKER/#production_2","title":"Production","text":"<ul> <li>Use multi-stage build (already configured)</li> <li>Strip debug symbols: <code>-ldflags=\"-w -s\"</code></li> <li>Use minimal base image (alpine)</li> <li>Don't include development dependencies</li> </ul>"},{"location":"DOCKER/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"DOCKER/#do","title":"\u2705 Do","text":"<ul> <li>Use Docker networks for service communication</li> <li>Keep database internal (don't expose ports)</li> <li>Use environment variables for config</li> <li>Separate dev and prod configs</li> <li>Use <code>.dockerignore</code> file</li> <li>Keep images small</li> </ul>"},{"location":"DOCKER/#dont","title":"\u274c Don't","text":"<ul> <li>Hardcode database connection strings</li> <li>Expose database ports to host in production</li> <li>Mount volumes in production</li> <li>Include source code in production images</li> <li>Commit secrets to git</li> </ul>"},{"location":"DOCKER/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Air (Hot-reload)</li> <li>Docker Multi-stage Builds</li> <li>Docker Compose</li> <li>Docker Networking</li> </ul>"},{"location":"DOCKER/#note-on-air-version","title":"\ud83d\udccc Note on Air Version","text":"<p>This project uses Air v1.52.3 (pinned version) instead of <code>@latest</code> because: - Air v1.63.0 has a bug requiring non-existent Go 1.25 - v1.52.3 is stable and fully compatible with Go 1.24 - All hot-reload features work perfectly</p> <p>When Air fixes the issue, you can update to <code>@latest</code> in the Dockerfile.</p> <p>Happy Dockering! \ud83d\udc33</p>"},{"location":"DOCS_SETUP/","title":"\ud83d\udcda Documentation Setup","text":"<p>This project uses MkDocs with the Material theme for beautiful, searchable documentation.</p>"},{"location":"DOCS_SETUP/#live-documentation","title":"\ud83c\udf10 Live Documentation","text":"<p>\ud83d\udd17 https://vahiiiid.github.io/go-rest-api-boilerplate/</p> <p>The documentation is automatically deployed to GitHub Pages when changes are pushed to the <code>main</code> branch.</p>"},{"location":"DOCS_SETUP/#local-development","title":"\ud83d\udee0\ufe0f Local Development","text":""},{"location":"DOCS_SETUP/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.x</li> <li>pip</li> </ul>"},{"location":"DOCS_SETUP/#installation","title":"Installation","text":"<p>Install MkDocs and required plugins:</p> <pre><code>pip install mkdocs mkdocs-material mkdocs-minify-plugin\n</code></pre> <p>Or use the provided script:</p> <pre><code>pip install -r docs-requirements.txt\n</code></pre>"},{"location":"DOCS_SETUP/#running-locally","title":"Running Locally","text":"<p>Start the development server with hot-reload:</p> <pre><code>mkdocs serve\n</code></pre> <p>The documentation will be available at http://127.0.0.1:8000</p> <p>Changes to any <code>.md</code> file will automatically reload in your browser!</p>"},{"location":"DOCS_SETUP/#building","title":"Building","text":"<p>To build the static site:</p> <pre><code>mkdocs build\n</code></pre> <p>The built site will be in the <code>site/</code> directory.</p> <p>To build with strict mode (recommended before committing):</p> <pre><code>mkdocs build --strict\n</code></pre> <p>This will fail if there are any warnings (broken links, missing files, etc.).</p>"},{"location":"DOCS_SETUP/#documentation-structure","title":"\ud83d\udcc1 Documentation Structure","text":"<pre><code>.\n\u251c\u2500\u2500 mkdocs.yml              # MkDocs configuration\n\u251c\u2500\u2500 README.md               # Copied to index.md for homepage\n\u251c\u2500\u2500 docs/                   # Documentation pages\n\u2502   \u251c\u2500\u2500 SETUP.md\n\u2502   \u251c\u2500\u2500 DOCKER.md\n\u2502   \u251c\u2500\u2500 DEVELOPMENT_GUIDE.md\n\u2502   \u251c\u2500\u2500 QUICK_REFERENCE.md\n\u2502   \u251c\u2500\u2500 PROJECT_SUMMARY.md\n\u2502   \u2514\u2500\u2500 SWAGGER.md\n\u251c\u2500\u2500 migrations/\n\u2502   \u2514\u2500\u2500 README.md           # Migration guide\n\u251c\u2500\u2500 CONTRIBUTING.md         # Contributing guidelines\n\u2514\u2500\u2500 LICENSE                 # License file\n</code></pre>"},{"location":"DOCS_SETUP/#adding-new-pages","title":"\u270f\ufe0f Adding New Pages","text":""},{"location":"DOCS_SETUP/#1-create-the-markdown-file","title":"1. Create the Markdown File","text":"<p>Add your new <code>.md</code> file in the appropriate location: - General guides \u2192 <code>docs/</code> - Feature-specific docs \u2192 <code>docs/features/</code> (create if needed)</p>"},{"location":"DOCS_SETUP/#2-update-navigation","title":"2. Update Navigation","text":"<p>Edit <code>mkdocs.yml</code> and add your page to the <code>nav</code> section:</p> <pre><code>nav:\n  - Home: index.md\n  - Your Section:\n      - New Page: docs/your-new-page.md\n</code></pre>"},{"location":"DOCS_SETUP/#3-test-locally","title":"3. Test Locally","text":"<pre><code>mkdocs serve\n</code></pre> <p>Visit http://127.0.0.1:8000 and verify: - \u2705 Page appears in navigation - \u2705 Content renders correctly - \u2705 Links work - \u2705 Code blocks have syntax highlighting</p>"},{"location":"DOCS_SETUP/#4-commit-and-push","title":"4. Commit and Push","text":"<pre><code>git add docs/your-new-page.md mkdocs.yml\ngit commit -m \"docs: add new page\"\ngit push origin main\n</code></pre> <p>GitHub Actions will automatically deploy the updated docs!</p>"},{"location":"DOCS_SETUP/#styling-and-features","title":"\ud83c\udfa8 Styling and Features","text":""},{"location":"DOCS_SETUP/#code-blocks","title":"Code Blocks","text":"<p>Use fenced code blocks with language tags:</p> <pre><code>\\`\\`\\`go\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}\n\\`\\`\\`\n</code></pre>"},{"location":"DOCS_SETUP/#admonitions","title":"Admonitions","text":"<p>Use admonitions for tips, warnings, notes:</p> <pre><code>!!! tip \"Pro Tip\"\n    Use `make quick-start` for fastest setup!\n\n!!! warning\n    Change JWT_SECRET before production!\n\n!!! note\n    This feature requires Go 1.24+\n\n!!! danger\n    This operation is irreversible!\n</code></pre>"},{"location":"DOCS_SETUP/#tabs","title":"Tabs","text":"<p>Create tabbed content:</p> <pre><code>=== \"macOS\"\n    ```bash\n    brew install go\n    ```\n\n=== \"Linux\"\n    ```bash\n    sudo apt install golang\n    ```\n\n=== \"Windows\"\n    ```powershell\n    choco install golang\n    ```\n</code></pre>"},{"location":"DOCS_SETUP/#tables","title":"Tables","text":"<p>Standard Markdown tables are supported:</p> <pre><code>| Feature | Status |\n|---------|--------|\n| JWT Auth | \u2705 |\n| Docker | \u2705 |\n| Tests | \u2705 |\n</code></pre>"},{"location":"DOCS_SETUP/#links","title":"Links","text":"<p>Link to other docs:</p> <pre><code>See [Setup Guide](SETUP.md) for details.\n</code></pre> <p>Link to external sites:</p> <pre><code>Check out [Go Documentation](https://go.dev/doc/)\n</code></pre>"},{"location":"DOCS_SETUP/#deployment","title":"\ud83d\ude80 Deployment","text":""},{"location":"DOCS_SETUP/#automatic-deployment","title":"Automatic Deployment","text":"<p>The documentation is automatically deployed via GitHub Actions when: - Changes are pushed to <code>main</code> branch - Any <code>.md</code> file is modified - <code>mkdocs.yml</code> is updated</p> <p>Workflow file: <code>.github/workflows/docs.yml</code></p>"},{"location":"DOCS_SETUP/#manual-deployment","title":"Manual Deployment","text":"<p>If needed, you can manually deploy:</p> <pre><code># Deploy to GitHub Pages\nmkdocs gh-deploy --force\n\n# Or trigger the GitHub Action manually\ngh workflow run docs.yml\n</code></pre>"},{"location":"DOCS_SETUP/#configuration","title":"\ud83d\udd27 Configuration","text":"<p>All configuration is in <code>mkdocs.yml</code>:</p> <pre><code>site_name: Go REST API Boilerplate\ntheme:\n  name: material\n  palette:\n    - scheme: default      # Light mode\n    - scheme: slate        # Dark mode\n  features:\n    - navigation.instant   # Fast loading\n    - navigation.tabs      # Top-level tabs\n    - search.suggest       # Search suggestions\n    - content.code.copy    # Copy code button\n</code></pre>"},{"location":"DOCS_SETUP/#customizing-theme","title":"Customizing Theme","text":"<p>To customize colors, fonts, or features, edit the <code>theme</code> section in <code>mkdocs.yml</code>.</p> <p>See Material theme documentation for all options.</p>"},{"location":"DOCS_SETUP/#analytics-optional","title":"\ud83d\udcca Analytics (Optional)","text":"<p>To add Google Analytics, add to <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  analytics:\n    provider: google\n    property: G-XXXXXXXXXX\n</code></pre>"},{"location":"DOCS_SETUP/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"DOCS_SETUP/#module-not-found-error","title":"\"Module not found\" error","text":"<pre><code>pip install --upgrade mkdocs mkdocs-material mkdocs-minify-plugin\n</code></pre>"},{"location":"DOCS_SETUP/#broken-links","title":"Broken links","text":"<p>Run with strict mode to find issues:</p> <pre><code>mkdocs build --strict\n</code></pre>"},{"location":"DOCS_SETUP/#images-not-showing","title":"Images not showing","text":"<ul> <li>Ensure images are in <code>docs/</code> or a subdirectory</li> <li>Use relative paths: <code>![Alt](./images/screenshot.png)</code></li> <li>Or absolute paths: <code>![Alt](/assets/logo.png)</code></li> </ul>"},{"location":"DOCS_SETUP/#changes-not-reflecting","title":"Changes not reflecting","text":"<ul> <li>Clear browser cache</li> <li>Restart <code>mkdocs serve</code></li> <li>Delete <code>site/</code> directory and rebuild</li> </ul>"},{"location":"DOCS_SETUP/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>MkDocs Documentation</li> <li>Material Theme</li> <li>Markdown Guide</li> <li>GitHub Pages</li> </ul>"},{"location":"DOCS_SETUP/#checklist-for-documentation-changes","title":"\u2705 Checklist for Documentation Changes","text":"<p>Before committing documentation changes:</p> <ul> <li> Created/updated <code>.md</code> files</li> <li> Updated <code>mkdocs.yml</code> navigation if needed</li> <li> Tested locally with <code>mkdocs serve</code></li> <li> Built with strict mode: <code>mkdocs build --strict</code></li> <li> Checked for broken links</li> <li> Verified code examples work</li> <li> Tested in both light and dark mode</li> <li> Committed and pushed to <code>main</code></li> </ul> <p>Happy documenting! \ud83d\udcdd</p>"},{"location":"LOGGING/","title":"\ud83d\udcca Logging &amp; Monitoring","text":"<p>GRAB includes a comprehensive structured logging system that provides detailed insights into your API's behavior, performance, and errors. This guide covers everything you need to know about logging configuration, monitoring, and production deployment.</p>"},{"location":"LOGGING/#overview","title":"\ud83c\udfaf Overview","text":"<p>GRAB uses structured JSON logging with the following features:</p> <ul> <li>\u2705 Structured JSON Format - Easy to parse and analyze</li> <li>\u2705 Request Tracking - Unique request IDs for tracing</li> <li>\u2705 Performance Metrics - Response times and sizes</li> <li>\u2705 Smart Log Levels - Automatic level adjustment based on status codes</li> <li>\u2705 Environment-Aware - Skip paths automatically configured per environment</li> <li>\u2705 Configurable - Log levels via YAML config or environment variables</li> </ul>"},{"location":"LOGGING/#log-format","title":"\ud83d\udccb Log Format","text":"<p>Every HTTP request generates a structured JSON log entry:</p> <pre><code>{\n  \"time\": \"2025-10-07T20:58:09.182401421Z\",\n  \"level\": \"INFO\",\n  \"msg\": \"HTTP Request\",\n  \"request_id\": \"245bf1f3-0c9b-4242-8770-bbf3735ce303\",\n  \"method\": \"POST\",\n  \"path\": \"/api/v1/auth/login\",\n  \"status\": 200,\n  \"duration\": 87074653,\n  \"duration_ms\": \"87ms\",\n  \"client_ip\": \"192.168.97.1\",\n  \"user_agent\": \"PostmanRuntime/7.26.8\",\n  \"response_size\": 287\n}\n</code></pre> <p>\ud83d\udcc4 Example Log File: See examples/server.log for a complete example with multiple log entries showing different scenarios (success, warnings, errors).</p>"},{"location":"LOGGING/#log-fields-explained","title":"Log Fields Explained","text":"Field Description Example <code>time</code> Timestamp in RFC3339 format <code>2025-10-07T20:58:09.182401421Z</code> <code>level</code> Log level (INFO/WARN/ERROR) <code>INFO</code> <code>msg</code> Log message <code>HTTP Request</code> <code>request_id</code> Unique request identifier <code>245bf1f3-0c9b-4242-8770-bbf3735ce303</code> <code>method</code> HTTP method <code>POST</code>, <code>GET</code>, <code>PUT</code>, <code>DELETE</code> <code>path</code> Request path with query params <code>/api/v1/auth/login?debug=true</code> <code>status</code> HTTP status code <code>200</code>, <code>404</code>, <code>500</code> <code>duration</code> Request duration in nanoseconds <code>87074653</code> <code>duration_ms</code> Human-readable duration <code>87ms</code> <code>client_ip</code> Client IP address <code>192.168.97.1</code> <code>user_agent</code> Client user agent <code>PostmanRuntime/7.26.8</code> <code>response_size</code> Response body size in bytes <code>287</code>"},{"location":"LOGGING/#log-levels","title":"\ud83c\udf9a\ufe0f Log Levels","text":"<p>GRAB automatically adjusts log levels based on HTTP status codes:</p> Status Code Log Level Description 200-399 <code>INFO</code> Successful requests 400-499 <code>WARN</code> Client errors (bad requests, unauthorized, etc.) 500-599 <code>ERROR</code> Server errors (internal errors, database issues, etc.)"},{"location":"LOGGING/#configurable-log-levels","title":"Configurable Log Levels","text":"<p>You can also set a minimum log level to filter out less important messages:</p> Level Description Use Case <code>debug</code> Most verbose, includes all messages Development debugging <code>info</code> Standard logging (default) Development and staging <code>warn</code> Warnings and errors only Production (recommended) <code>error</code> Errors only High-traffic production"},{"location":"LOGGING/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"LOGGING/#yaml-configuration","title":"YAML Configuration","text":"<p>Edit <code>configs/config.yaml</code>:</p> <pre><code>logging:\n  level: info  # debug, info, warn, error\n</code></pre>"},{"location":"LOGGING/#environment-variables","title":"Environment Variables","text":"<p>Override YAML configuration with environment variables:</p> <pre><code># Set log level\nexport LOG_LEVEL=debug\n\n# Set environment (affects skip paths)\nexport ENV=production\n</code></pre>"},{"location":"LOGGING/#docker-configuration","title":"Docker Configuration","text":"<p>In <code>docker-compose.yml</code>:</p> <pre><code>environment:\n  LOG_LEVEL: debug  # debug, info, warn, error\n  ENV: development\n</code></pre> <p>In <code>docker-compose.prod.yml</code>:</p> <pre><code>environment:\n  LOG_LEVEL: warn   # Production defaults to warn level\n  ENV: production\n</code></pre>"},{"location":"LOGGING/#skip-paths-environment-based","title":"\ud83d\udeab Skip Paths (Environment-Based)","text":"<p>Skip paths are automatically determined based on environment to reduce log noise:</p> Environment Skip Paths Reason <code>production</code> <code>/health</code>, <code>/metrics</code>, <code>/debug</code>, <code>/pprof</code> Reduce noise from monitoring endpoints <code>development</code> <code>/health</code> Keep health checks quiet <code>test</code> <code>/health</code> Clean test output <code>default</code> <code>/health</code> Safe default"},{"location":"LOGGING/#where-to-find-logs","title":"\ud83d\udccd Where to Find Logs","text":""},{"location":"LOGGING/#docker-development","title":"\ud83d\udc33 Docker Development","text":"<p>View live logs: <pre><code># View all container logs\ndocker-compose logs -f\n\n# View only app logs\ndocker-compose logs -f app\n\n# View logs with timestamps\ndocker-compose logs -f -t app\n</code></pre></p> <p>Save logs to file: <pre><code># Save logs to file\ndocker-compose logs app &gt; server.log\n\n# Append logs to file\ndocker-compose logs app &gt;&gt; server.log\n\n# Save logs with timestamps\ndocker-compose logs -t app &gt; server.log\n</code></pre></p> <p>Redirect stdout to file: <pre><code># Method 1: Redirect docker-compose output\ndocker-compose up &gt; server.log 2&gt;&amp;1\n\n# Method 2: Use docker logs with redirection\ndocker-compose up -d\ndocker-compose logs -f app &gt; server.log &amp;\n\n# Method 3: Direct container log redirection\ndocker logs -f go_api_app &gt; server.log\n</code></pre></p>"},{"location":"LOGGING/#go-build-run","title":"\ud83c\udfd7\ufe0f Go Build &amp; Run","text":"<p>Direct execution: <pre><code># Logs go to stdout (terminal)\ngo run cmd/server/main.go\n\n# Redirect to file\ngo run cmd/server/main.go &gt; server.log 2&gt;&amp;1\n\n# Run in background with logging\nnohup go run cmd/server/main.go &gt; server.log 2&gt;&amp;1 &amp;\n</code></pre></p> <p>Built binary: <pre><code># Build the binary\ngo build -o bin/server cmd/server/main.go\n\n# Run with logging\n./bin/server &gt; server.log 2&gt;&amp;1\n\n# Run in background\nnohup ./bin/server &gt; server.log 2&gt;&amp;1 &amp;\n</code></pre></p>"},{"location":"LOGGING/#log-file-locations","title":"\ud83d\udcc1 Log File Locations","text":"Method Default Location Custom Location Docker stdout Container logs <code>docker-compose logs &gt; custom.log</code> Go run redirect <code>./server.log</code> <code>go run cmd/server/main.go &gt; custom.log</code> Binary redirect <code>./server.log</code> <code>./bin/server &gt; custom.log</code> Background process <code>./nohup.out</code> <code>nohup ./bin/server &gt; custom.log</code>"},{"location":"LOGGING/#production-logging","title":"\ud83c\udfed Production Logging","text":""},{"location":"LOGGING/#log-aggregation-setup","title":"Log Aggregation Setup","text":"<p>For production, you'll want to set up log aggregation. Here are popular options:</p>"},{"location":"LOGGING/#1-elk-stack-elasticsearch-logstash-kibana","title":"1. ELK Stack (Elasticsearch, Logstash, Kibana)","text":"<pre><code># docker-compose.prod.yml\nservices:\n  app:\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n    # ... rest of config\n</code></pre>"},{"location":"LOGGING/#2-fluentd-elasticsearch","title":"2. Fluentd + Elasticsearch","text":"<pre><code># docker-compose.prod.yml\nservices:\n  app:\n    logging:\n      driver: \"fluentd\"\n      options:\n        fluentd-address: \"localhost:24224\"\n        tag: \"api.logs\"\n</code></pre>"},{"location":"LOGGING/#3-prometheus-grafana","title":"3. Prometheus + Grafana","text":"<pre><code># docker-compose.prod.yml\nservices:\n  app:\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n</code></pre>"},{"location":"LOGGING/#production-configuration","title":"Production Configuration","text":"<p>Recommended production settings:</p> <pre><code># configs/config.yaml\nlogging:\n  level: warn  # Only warnings and errors\n</code></pre> <pre><code># Environment variables\nexport LOG_LEVEL=warn\nexport ENV=production\n</code></pre>"},{"location":"LOGGING/#log-rotation","title":"Log Rotation","text":"<p>Docker log rotation: <pre><code># docker-compose.prod.yml\nservices:\n  app:\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"    # Max 10MB per file\n        max-file: \"5\"      # Keep 5 files (50MB total)\n</code></pre></p> <p>System log rotation: <pre><code># Install logrotate\nsudo apt-get install logrotate\n\n# Create logrotate config\nsudo tee /etc/logrotate.d/go-api &lt;&lt; EOF\n/path/to/server.log {\n    daily\n    missingok\n    rotate 7\n    compress\n    delaycompress\n    notifempty\n    create 644 root root\n    postrotate\n        # Restart your service if needed\n        systemctl reload go-api\n    endscript\n}\nEOF\n</code></pre></p>"},{"location":"LOGGING/#log-analysis-examples","title":"\ud83d\udd0d Log Analysis Examples","text":""},{"location":"LOGGING/#basic-analysis-with-jq","title":"Basic Analysis with <code>jq</code>","text":"<pre><code># Count requests by status code\ncat server.log | jq -r '.status' | sort | uniq -c\n\n# Find slow requests (&gt;100ms)\ncat server.log | jq 'select(.duration_ms | tonumber &gt; 100)'\n\n# Find errors\ncat server.log | jq 'select(.level == \"ERROR\")'\n\n# Count requests by endpoint\ncat server.log | jq -r '.path' | sort | uniq -c\n\n# Find requests from specific IP\ncat server.log | jq 'select(.client_ip == \"192.168.1.100\")'\n</code></pre>"},{"location":"LOGGING/#advanced-analysis","title":"Advanced Analysis","text":"<pre><code># Average response time by endpoint\ncat server.log | jq -r 'select(.status &lt; 400) | \"\\(.path) \\(.duration_ms)\"' | \\\n  awk '{sum[$1]+=$2; count[$1]++} END {for (i in sum) print i, sum[i]/count[i]}'\n\n# Top 10 slowest requests\ncat server.log | jq -r 'select(.status &lt; 400) | \"\\(.duration_ms) \\(.path) \\(.method)\"' | \\\n  sort -nr | head -10\n\n# Error rate by endpoint\ncat server.log | jq -r '.path' | sort | uniq -c | \\\n  awk '{print $2, $1}' | sort -k2 -nr\n</code></pre>"},{"location":"LOGGING/#troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":""},{"location":"LOGGING/#common-issues","title":"Common Issues","text":"<p>1. No logs appearing: <pre><code># Check if service is running\ndocker-compose ps\n\n# Check container logs\ndocker-compose logs app\n\n# Verify log level\necho $LOG_LEVEL\n</code></pre></p> <p>2. Too many logs: <pre><code># Increase log level\nexport LOG_LEVEL=warn\n\n# Check skip paths\necho $ENV\n</code></pre></p> <p>3. Log file not created: <pre><code># Check permissions\nls -la server.log\n\n# Check disk space\ndf -h\n\n# Verify redirection\ngo run cmd/server/main.go &gt; server.log 2&gt;&amp;1 &amp;\n</code></pre></p>"},{"location":"LOGGING/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging: <pre><code># Development\nexport LOG_LEVEL=debug\nexport ENV=development\ngo run cmd/server/main.go\n\n# Docker\nLOG_LEVEL=debug docker-compose up\n</code></pre></p>"},{"location":"LOGGING/#monitoring-integration","title":"\ud83d\udcca Monitoring Integration","text":""},{"location":"LOGGING/#health-check-endpoint","title":"Health Check Endpoint","text":"<p>The <code>/health</code> endpoint is automatically excluded from logging but provides basic health information:</p> <pre><code>curl http://localhost:8080/health\n</code></pre> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"Server is running\"\n}\n</code></pre></p>"},{"location":"LOGGING/#metrics-collection","title":"Metrics Collection","text":"<p>For production monitoring, consider adding:</p> <ul> <li>Prometheus metrics for request rates, response times, error rates</li> <li>Health check endpoints for load balancer health</li> <li>Custom metrics for business logic monitoring</li> </ul>"},{"location":"LOGGING/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"LOGGING/#development","title":"Development","text":"<ul> <li>Use <code>debug</code> level for detailed debugging</li> <li>Monitor logs in real-time with <code>docker-compose logs -f</code></li> <li>Use structured queries with <code>jq</code> for analysis</li> </ul>"},{"location":"LOGGING/#production","title":"Production","text":"<ul> <li>Use <code>warn</code> level to reduce noise</li> <li>Set up log aggregation (ELK, Fluentd, etc.)</li> <li>Implement log rotation to prevent disk space issues</li> <li>Monitor error rates and response times</li> <li>Set up alerts for high error rates or slow responses</li> </ul>"},{"location":"LOGGING/#security","title":"Security","text":"<ul> <li>Never log sensitive data (passwords, tokens, PII)</li> <li>Use request IDs for tracing without exposing user data</li> <li>Consider log sanitization for compliance requirements</li> </ul>"},{"location":"LOGGING/#quick-commands-reference","title":"\ud83d\ude80 Quick Commands Reference","text":"<pre><code># View live logs (Docker)\ndocker-compose logs -f app\n\n# Save logs to file (Docker)\ndocker-compose logs app &gt; server.log\n\n# View logs (Go run)\ngo run cmd/server/main.go\n\n# Save logs to file (Go run)\ngo run cmd/server/main.go &gt; server.log 2&gt;&amp;1\n\n# Analyze logs with jq\ncat server.log | jq 'select(.level == \"ERROR\")'\n\n# Count requests by status\ncat server.log | jq -r '.status' | sort | uniq -c\n\n# Find slow requests\ncat server.log | jq 'select(.duration_ms | tonumber &gt; 100)'\n</code></pre>   **\ud83d\udcda [Back to Documentation](index.md) | [Development Guide](DEVELOPMENT_GUIDE.md) | [Docker Guide](DOCKER.md)**"},{"location":"MIGRATIONS_GUIDE/","title":"Database Migrations Guide","text":"<p>This guide explains how to manage database schema changes in GRAB using versioned SQL migrations and the built-in migration logic.</p>"},{"location":"MIGRATIONS_GUIDE/#current-status","title":"Current Status","text":"<p>Development:</p> <ul> <li>The application uses GORM AutoMigrate for rapid prototyping and development. This automatically creates/updates tables on startup.</li> </ul> <p>Production:</p> <ul> <li>For production, AutoMigrate is NOT recommended. Use versioned SQL migrations and a migration tool for safety, auditability, and rollback support.</li> </ul> <p>Migration Files Example:</p> <ul> <li><code>000001_create_users_table.up.sql</code> \u2013 Creates users table with indexes</li> <li><code>000001_create_users_table.down.sql</code> \u2013 Drops users table</li> </ul>"},{"location":"MIGRATIONS_GUIDE/#running-migrations","title":"Running Migrations","text":"<ul> <li>Migrations are automatically run as part of the <code>make quick-start</code> and <code>make migrate-up</code> commands.</li> <li>Rollbacks can be performed with <code>make migrate-down</code>.</li> <li>Migration status and error handling are now robust: errors during migration status checks are logged and surfaced.</li> <li>Migration logic is covered by automated tests (see <code>internal/migrate/migrate_test.go</code>).</li> </ul>"},{"location":"MIGRATIONS_GUIDE/#best-practices","title":"Best Practices","text":"<ul> <li>Always use versioned SQL migrations in production.</li> <li>Test both up and down migrations before deploying.</li> <li>Use the provided Makefile commands for consistent workflow.</li> </ul>"},{"location":"MIGRATIONS_GUIDE/#migration-workflow-in-grab","title":"Migration Workflow in GRAB","text":""},{"location":"MIGRATIONS_GUIDE/#running-migrations_1","title":"Running Migrations","text":"<ul> <li>Migrations are automatically run as part of the <code>make quick-start</code> and <code>make migrate-up</code> commands.</li> <li>Rollbacks can be performed with <code>make migrate-down</code>.</li> <li>Migration status and error handling are now robust: errors during migration status checks are logged and surfaced.</li> <li>Migration logic is covered by automated tests (see <code>internal/migrate/migrate_test.go</code>).</li> </ul>"},{"location":"MIGRATIONS_GUIDE/#best-practices_1","title":"Best Practices","text":"<ul> <li>Always use versioned SQL migrations in production.</li> <li>Test both up and down migrations before deploying.</li> <li>Use the provided Makefile commands for consistent workflow.</li> </ul>"},{"location":"MIGRATIONS_GUIDE/#using-migration-tools","title":"Using Migration Tools","text":"<p>For advanced scenarios or custom workflows, you can use external migration tools. Here are three popular options:</p>"},{"location":"MIGRATIONS_GUIDE/#option-1-golang-migrate-recommended","title":"Option 1: golang-migrate (Recommended)","text":"<p>Install:</p> <pre><code>brew install golang-migrate\n# Or using Go\ngo install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest\n</code></pre> <p>Run migrations:</p> <pre><code>migrate -path migrations -database \"postgres://postgres:postgres@localhost:5432/go_api?sslmode=disable\" up\nmigrate -path migrations -database \"postgres://postgres:postgres@localhost:5432/go_api?sslmode=disable\" down 1\nmigrate -path migrations -database \"postgres://postgres:postgres@localhost:5432/go_api?sslmode=disable\" version\nmigrate -path migrations -database \"postgres://postgres:postgres@localhost:5432/go_api?sslmode=disable\" force 1\n</code></pre> <p>Create new migration:</p> <pre><code>migrate create -ext sql -dir migrations -seq add_user_avatar_column\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#option-2-goose","title":"Option 2: goose","text":"<p>Install:</p> <pre><code>go install github.com/pressly/goose/v3/cmd/goose@latest\n</code></pre> <p>Run migrations:</p> <pre><code>goose -dir migrations postgres \"user=postgres password=postgres dbname=go_api sslmode=disable\" up\ngoose -dir migrations postgres \"user=postgres password=postgres dbname=go_api sslmode=disable\" down\ngoose -dir migrations postgres \"user=postgres password=postgres dbname=go_api sslmode=disable\" status\n</code></pre> <p>Create new migration:</p> <pre><code>goose -dir migrations create add_user_avatar sql\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#option-3-atlas","title":"Option 3: Atlas","text":"<p>Install:</p> <pre><code>curl -sSf https://atlasgo.sh | sh\n</code></pre> <p>Generate migration from schema:</p> <pre><code>atlas migrate diff --env local\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#option-3-atlas_1","title":"Option 3: Atlas","text":""},{"location":"MIGRATIONS_GUIDE/#install","title":"Install","text":"<pre><code>curl -sSf https://atlasgo.sh | sh\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#usage","title":"Usage","text":"<pre><code># Apply migrations\natlas migrate apply --env local\n\n# Generate migration from models\natlas migrate diff --env local\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#migration-naming-convention","title":"Migration Naming Convention","text":"<p>We use sequential numbering with descriptive names:</p> <pre><code>000001_create_users_table.up.sql\n000001_create_users_table.down.sql\n000002_add_user_avatar_column.up.sql\n000002_add_user_avatar_column.down.sql\n000003_create_posts_table.up.sql\n000003_create_posts_table.down.sql\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#migration-best-practices","title":"Migration Best Practices","text":""},{"location":"MIGRATIONS_GUIDE/#1-always-write-reversible-migrations","title":"1. Always Write Reversible Migrations","text":"<p>Every <code>.up.sql</code> should have a corresponding <code>.down.sql</code> that reverses the changes.</p>"},{"location":"MIGRATIONS_GUIDE/#2-test-migrations","title":"2. Test Migrations","text":"<pre><code># Test up\nmigrate -path migrations -database \"...\" up\n\n# Test down\nmigrate -path migrations -database \"...\" down 1\n\n# Test up again\nmigrate -path migrations -database \"...\" up\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#3-never-modify-existing-migrations","title":"3. Never Modify Existing Migrations","text":"<p>Once a migration is committed and applied in any environment, never modify it. Create a new migration instead.</p>"},{"location":"MIGRATIONS_GUIDE/#4-keep-migrations-small","title":"4. Keep Migrations Small","text":"<p>One logical change per migration. Don't combine unrelated changes.</p>"},{"location":"MIGRATIONS_GUIDE/#5-backup-before-production-migrations","title":"5. Backup Before Production Migrations","text":"<pre><code># PostgreSQL backup\npg_dump -U postgres go_api &gt; backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore if needed\npsql -U postgres go_api &lt; backup_20240101_120000.sql\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#switching-from-automigrate-to-migrations","title":"Switching from AutoMigrate to Migrations","text":"<p>To switch from GORM AutoMigrate to proper migrations:</p>"},{"location":"MIGRATIONS_GUIDE/#step-1-comment-out-automigrate","title":"Step 1: Comment out AutoMigrate","text":"<p>In <code>cmd/server/main.go</code>: <pre><code>// Comment this out:\n// if err := database.AutoMigrate(&amp;user.User{}); err != nil {\n//     log.Fatalf(\"Failed to run migrations: %v\", err)\n// }\n</code></pre></p>"},{"location":"MIGRATIONS_GUIDE/#step-2-run-migrations-manually","title":"Step 2: Run migrations manually","text":"<pre><code>migrate -path migrations -database \"postgres://...\" up\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#step-3-update-deployment-scripts","title":"Step 3: Update deployment scripts","text":"<p>Add migration step to your CI/CD or deployment process.</p>"},{"location":"MIGRATIONS_GUIDE/#docker-integration","title":"Docker Integration","text":""},{"location":"MIGRATIONS_GUIDE/#using-golang-migrate-in-docker","title":"Using golang-migrate in Docker","text":"<pre><code># Add to Dockerfile\nFROM golang:1.24-alpine AS builder\nRUN apk add --no-cache git\nRUN go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#docker-compose-with-migrations","title":"docker-compose with migrations","text":"<pre><code>services:\n  migrate:\n    image: migrate/migrate\n    volumes:\n      - ./migrations:/migrations\n    command: [\"-path\", \"/migrations\", \"-database\", \"postgres://postgres:postgres@db:5432/go_api?sslmode=disable\", \"up\"]\n    depends_on:\n      - db\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#common-issues-solutions","title":"Common Issues &amp; Solutions","text":""},{"location":"MIGRATIONS_GUIDE/#issue-dirty-database-version","title":"Issue: \"Dirty database version\"","text":"<pre><code># This means a migration failed partway through\n# Check which version is dirty\nmigrate -path migrations -database \"...\" version\n\n# Force to the correct version (after manually fixing the database)\nmigrate -path migrations -database \"...\" force VERSION_NUMBER\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#issue-migration-already-applied","title":"Issue: \"Migration already applied\"","text":"<p>This is normal. The tool tracks which migrations have been applied in a <code>schema_migrations</code> table.</p>"},{"location":"MIGRATIONS_GUIDE/#issue-connection-refused","title":"Issue: \"Connection refused\"","text":"<p>Make sure your database is running and credentials are correct.</p>"},{"location":"MIGRATIONS_GUIDE/#current-schema","title":"Current Schema","text":"<p>Based on <code>internal/user/model.go</code>, the users table schema is:</p> <pre><code>TABLE users\n\u251c\u2500\u2500 id            SERIAL PRIMARY KEY\n\u251c\u2500\u2500 name          VARCHAR(255) NOT NULL\n\u251c\u2500\u2500 email         VARCHAR(255) UNIQUE NOT NULL\n\u251c\u2500\u2500 password_hash VARCHAR(255) NOT NULL\n\u251c\u2500\u2500 created_at    TIMESTAMP WITH TIME ZONE\n\u251c\u2500\u2500 updated_at    TIMESTAMP WITH TIME ZONE\n\u2514\u2500\u2500 deleted_at    TIMESTAMP WITH TIME ZONE\n\nINDEXES\n\u251c\u2500\u2500 idx_users_email\n\u2514\u2500\u2500 idx_users_deleted_at\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#example-adding-a-new-column","title":"Example: Adding a New Column","text":""},{"location":"MIGRATIONS_GUIDE/#000002_add_user_phoneupsql","title":"000002_add_user_phone.up.sql","text":"<pre><code>ALTER TABLE users \nADD COLUMN phone VARCHAR(20);\n\nCREATE INDEX idx_users_phone ON users(phone);\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#000002_add_user_phonedownsql","title":"000002_add_user_phone.down.sql","text":"<pre><code>DROP INDEX IF EXISTS idx_users_phone;\n\nALTER TABLE users \nDROP COLUMN IF EXISTS phone;\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"MIGRATIONS_GUIDE/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code>jobs:\n  migrate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Run migrations\n        env:\n          DATABASE_URL: ${{ secrets.DATABASE_URL }}\n        run: |\n          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.2/migrate.linux-amd64.tar.gz | tar xvz\n          ./migrate -path migrations -database \"$DATABASE_URL\" up\n</code></pre>"},{"location":"MIGRATIONS_GUIDE/#resources","title":"Resources","text":"<ul> <li>golang-migrate Documentation</li> <li>goose Documentation</li> <li>Atlas Documentation</li> <li>PostgreSQL ALTER TABLE</li> </ul>"},{"location":"MIGRATIONS_GUIDE/#need-help","title":"Need Help?","text":"<ul> <li>Check migrations/README.md for overview</li> <li>See existing migrations for examples</li> <li>Review PostgreSQL documentation</li> <li>Open an issue on GitHub</li> </ul> <p>Remember: Migrations are your database's version control. Treat them with the same care as your code! \ud83d\uddc3\ufe0f</p>"},{"location":"MIGRATIONS_OVERVIEW/","title":"Database Migrations","text":"<p>This directory is a placeholder for database migrations if you choose to use a migration tool in production.</p>"},{"location":"MIGRATIONS_OVERVIEW/#current-approach","title":"Current Approach","text":"<p>The project currently uses GORM AutoMigrate which automatically handles schema migrations on application startup. This is suitable for development and small projects.</p>"},{"location":"MIGRATIONS_OVERVIEW/#for-production","title":"For Production","text":"<p>For production environments, we recommend using a proper migration tool:</p>"},{"location":"MIGRATIONS_OVERVIEW/#option-1-golang-migrate","title":"Option 1: golang-migrate","text":"<pre><code># Install\ngo install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest\n\n# Create migration\nmigrate create -ext sql -dir migrations -seq create_users_table\n\n# Run migrations\nmigrate -path migrations -database \"postgres://user:password@localhost:5432/dbname?sslmode=disable\" up\n</code></pre>"},{"location":"MIGRATIONS_OVERVIEW/#option-2-goose","title":"Option 2: goose","text":"<pre><code># Install\ngo install github.com/pressly/goose/v3/cmd/goose@latest\n\n# Create migration\ngoose -dir migrations create create_users_table sql\n\n# Run migrations\ngoose -dir migrations postgres \"user=postgres password=postgres dbname=go_api sslmode=disable\" up\n</code></pre>"},{"location":"MIGRATIONS_OVERVIEW/#option-3-atlas","title":"Option 3: Atlas","text":"<pre><code># Install\ncurl -sSf https://atlasgo.sh | sh\n\n# Generate migration from schema\natlas migrate diff --env local\n</code></pre>"},{"location":"MIGRATIONS_OVERVIEW/#migration-best-practices","title":"Migration Best Practices","text":"<ol> <li>Always use migrations in production - Never rely on AutoMigrate</li> <li>Version control - Keep migrations in version control</li> <li>Test migrations - Test both up and down migrations</li> <li>Backup first - Always backup before running migrations in production</li> <li>Atomic changes - Each migration should be atomic and reversible</li> <li>No data loss - Avoid migrations that lose data</li> </ol>"},{"location":"MIGRATIONS_OVERVIEW/#example-migration","title":"Example Migration","text":""},{"location":"MIGRATIONS_OVERVIEW/#create_users_tableupsql","title":"create_users_table.up.sql","text":"<pre><code>CREATE TABLE IF NOT EXISTS users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    deleted_at TIMESTAMP\n);\n\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_users_deleted_at ON users(deleted_at);\n</code></pre>"},{"location":"MIGRATIONS_OVERVIEW/#create_users_tabledownsql","title":"create_users_table.down.sql","text":"<pre><code>DROP INDEX IF EXISTS idx_users_deleted_at;\nDROP INDEX IF EXISTS idx_users_email;\nDROP TABLE IF EXISTS users;\n</code></pre>"},{"location":"PROJECT_SUMMARY/","title":"\ud83d\udccb Project Summary - Go REST API Boilerplate","text":""},{"location":"PROJECT_SUMMARY/#overview","title":"Overview","text":"<p>This is a production-ready, REST API boilerplate written in Go. It demonstrates best practices, clean architecture, and provides everything needed to build scalable REST APIs.</p>"},{"location":"PROJECT_SUMMARY/#what-makes-this-special","title":"\u2728 What Makes This Special","text":""},{"location":"PROJECT_SUMMARY/#1-clean-architecture","title":"1. Clean Architecture","text":"<ul> <li>Layered structure: Handlers \u2192 Services \u2192 Repositories</li> <li>Clear separation of concerns</li> <li>Easy to test and maintain</li> <li>Follows Go idioms and best practices</li> </ul>"},{"location":"PROJECT_SUMMARY/#2-production-ready","title":"2. Production Ready","text":"<ul> <li>\u2705 JWT Authentication with secure password hashing</li> <li>\u2705 PostgreSQL with GORM</li> <li>\u2705 Comprehensive error handling</li> <li>\u2705 Input validation</li> <li>\u2705 Structured logging</li> <li>\u2705 Health check endpoint</li> <li>\u2705 CORS support</li> </ul>"},{"location":"PROJECT_SUMMARY/#3-developer-friendly","title":"3. Developer Friendly","text":"<ul> <li>\u2705 Complete Swagger/OpenAPI documentation</li> <li>\u2705 Docker &amp; Docker Compose setup</li> <li>\u2705 Makefile for common tasks</li> <li>\u2705 Unit and integration tests</li> <li>\u2705 Postman collection included</li> <li>\u2705 GitHub Actions CI/CD</li> <li>\u2705 Detailed README with examples</li> </ul>"},{"location":"PROJECT_SUMMARY/#4-easy-to-extend","title":"4. Easy to Extend","text":"<ul> <li>Clear domain structure</li> <li>Repository pattern for data access</li> <li>Service layer for business logic</li> <li>DTOs for request/response</li> <li>Middleware pattern for cross-cutting concerns</li> </ul>"},{"location":"PROJECT_SUMMARY/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>go-rest-api-boilerplate/\n\u251c\u2500\u2500 .github/              # GitHub workflows, issue templates, PR templates\n\u251c\u2500\u2500 api/                  # API documentation (Swagger, Postman)\n\u2502   \u2514\u2500\u2500 docs/             # Generated Swagger docs\n\u251c\u2500\u2500 cmd/                  # Application entry points (server, migrate)\n\u251c\u2500\u2500 configs/              # YAML configuration files for all environments\n\u251c\u2500\u2500 internal/             # Main application code (private)\n\u2502   \u251c\u2500\u2500 auth/             # Authentication logic (JWT, middleware)\n\u2502   \u251c\u2500\u2500 config/           # Configuration management and validation\n\u2502   \u251c\u2500\u2500 ctx/              # Context helpers/utilities\n\u2502   \u251c\u2500\u2500 db/               # Database connection and setup\n\u2502   \u251c\u2500\u2500 middleware/       # HTTP middleware (logging, rate limiting)\n\u2502   \u251c\u2500\u2500 migrate/          # Migration logic and status checks\n\u2502   \u251c\u2500\u2500 server/           # Router and server setup\n\u2502   \u2514\u2500\u2500 user/             # User domain (handlers, services, repository)\n\u251c\u2500\u2500 migrations/           # Versioned SQL migration files\n\u251c\u2500\u2500 scripts/              # Helper shell scripts (entrypoints, quick-start)\n\u251c\u2500\u2500 tests/                # Integration and utility tests\n\u251c\u2500\u2500 tmp/                  # Temp files (e.g., Air hot-reload, gitignored)\n\u251c\u2500\u2500 Dockerfile            # Multi-stage Docker build\n\u251c\u2500\u2500 docker-compose.yml    # Docker Compose (development)\n\u251c\u2500\u2500 docker-compose.prod.yml # Docker Compose (production)\n\u251c\u2500\u2500 Makefile              # Build and workflow automation\n\u251c\u2500\u2500 README.md             # Main project overview\n\u251c\u2500\u2500 CONTRIBUTING.md       # Contribution guidelines\n\u251c\u2500\u2500 SECURITY.md           # Security policy\n\u251c\u2500\u2500 LICENSE               # Project license\n\u2514\u2500\u2500 ...                   # Other root files (changelog, codecov, etc.)\n</code></pre>"},{"location":"PROJECT_SUMMARY/#key-features","title":"\ud83d\ude80 Key Features","text":""},{"location":"PROJECT_SUMMARY/#authentication-security","title":"Authentication &amp; Security","text":"<ul> <li>JWT tokens with HS256 signing</li> <li>Bcrypt password hashing (cost 10)</li> <li>Token expiration (configurable, default 24h)</li> <li>Authorization middleware for protected routes</li> <li>Input validation on all endpoints</li> <li>No sensitive data in responses</li> </ul>"},{"location":"PROJECT_SUMMARY/#api-endpoints","title":"API Endpoints","text":"<ul> <li><code>POST /api/v1/auth/register</code> - User registration</li> <li><code>POST /api/v1/auth/login</code> - User login</li> <li><code>GET /api/v1/users/:id</code> - Get user (protected)</li> <li><code>PUT /api/v1/users/:id</code> - Update user (protected)</li> <li><code>DELETE /api/v1/users/:id</code> - Delete user (protected)</li> <li><code>GET /health</code> - Health check</li> </ul>"},{"location":"PROJECT_SUMMARY/#database","title":"Database","text":"<ul> <li>PostgreSQL as primary database</li> <li>GORM for ORM (with hooks, migrations, associations)</li> <li>SQLite for testing (in-memory)</li> <li>Connection pooling configured</li> <li>Soft deletes enabled</li> <li>Automatic timestamps</li> </ul>"},{"location":"PROJECT_SUMMARY/#documentation","title":"Documentation","text":"<ul> <li>Swagger UI at <code>/swagger/index.html</code></li> <li>OpenAPI 3.0 spec</li> <li>Interactive API testing</li> <li>Complete curl examples</li> <li>Postman collection</li> </ul>"},{"location":"PROJECT_SUMMARY/#testing","title":"Testing","text":"<ul> <li>Unit tests for handlers</li> <li>Integration tests with httptest</li> <li>In-memory SQLite for CI (no dependencies)</li> <li>Table-driven tests</li> <li>90%+ coverage achievable</li> </ul>"},{"location":"PROJECT_SUMMARY/#cicd","title":"CI/CD","text":"<ul> <li>GitHub Actions workflow</li> <li>Multi-version testing (Go 1.23, 1.24)</li> <li>Linting with golangci-lint</li> <li>Automated tests on push/PR</li> <li>Coverage reporting</li> </ul>"},{"location":"PROJECT_SUMMARY/#docker","title":"Docker","text":"<ul> <li>Multi-stage build for small images</li> <li>Docker Compose for local dev</li> <li>Health checks configured</li> <li>Volume persistence</li> <li>Environment variables support</li> </ul>"},{"location":"PROJECT_SUMMARY/#technical-stack","title":"\ud83d\udcca Technical Stack","text":"Component Technology Purpose Language Go 1.24 Performance, simplicity, type safety Web Framework Gin Fast HTTP router, middleware support ORM GORM Database abstraction, migrations Database PostgreSQL 15 Reliable, feature-rich RDBMS Auth JWT (HS256) Stateless authentication Password bcrypt Secure password hashing Validation Gin binding Request validation API Docs Swaggo Swagger/OpenAPI generation Testing httptest HTTP testing utilities CI/CD GitHub Actions Automated testing and linting Containerization Docker Consistent environments"},{"location":"PROJECT_SUMMARY/#use-cases","title":"\ud83c\udfaf Use Cases","text":"<p>This boilerplate is perfect for:</p> <ol> <li>New REST API projects - Start with a solid foundation</li> <li>Microservices - Each service can use this pattern</li> <li>Learning Go web development - See best practices in action</li> <li>Prototyping - Quickly build and test APIs</li> <li>Interview projects - Demonstrate your skills</li> <li>Team templates - Standardize your team's approach</li> </ol>"},{"location":"PROJECT_SUMMARY/#customization-points","title":"\ud83d\udd27 Customization Points","text":"<p>Easy to customize:</p> <ul> <li>Add new domains: Copy the <code>user</code> package structure</li> <li>Add middleware: JWT auth pattern is reusable</li> <li>Change database: GORM supports MySQL, SQLite, etc.</li> <li>Add rate limiting: Middleware pattern makes it easy</li> <li>Add logging: Service layer is perfect for structured logs</li> <li>Add metrics: Instrument handlers and services</li> </ul>"},{"location":"PROJECT_SUMMARY/#what-you-get","title":"\ud83d\udcc8 What You Get","text":""},{"location":"PROJECT_SUMMARY/#for-developers","title":"For Developers","text":"<ul> <li>\u2705 Skip boilerplate setup</li> <li>\u2705 Focus on business logic</li> <li>\u2705 Learn Go best practices</li> <li>\u2705 Ready-to-use patterns</li> </ul>"},{"location":"PROJECT_SUMMARY/#for-teams","title":"For Teams","text":"<ul> <li>\u2705 Consistent structure</li> <li>\u2705 Easy onboarding</li> <li>\u2705 Scalable foundation</li> <li>\u2705 Production patterns</li> </ul>"},{"location":"PROJECT_SUMMARY/#for-learning","title":"For Learning","text":"<ul> <li>\u2705 Real-world examples</li> <li>\u2705 Complete test coverage</li> <li>\u2705 Best practice patterns</li> <li>\u2705 Well-documented code</li> </ul>"},{"location":"PROJECT_SUMMARY/#getting-started-30-seconds","title":"\ud83d\udea6 Getting Started (30 seconds)","text":"<pre><code># Clone the repo\ngit clone https://github.com/vahiiiid/go-rest-api-boilerplate.git\ncd go-rest-api-boilerplate\n\n# Run the quick start script\n./scripts/quick-start.sh\n\n# Or manually with Docker\ndocker-compose up --build\n</code></pre> <p>That's it! API running at http://localhost:8080 \u2728</p>"},{"location":"PROJECT_SUMMARY/#documentation_1","title":"\ud83d\udcda Documentation","text":"<ul> <li>README.md - Main documentation with API examples</li> <li>SETUP.md - Detailed setup instructions</li> <li>CONTRIBUTING.md - Contribution guidelines</li> <li>PROJECT_SUMMARY.md - This file (overview)</li> <li>migrations/README.md - Database migration guide</li> <li>Swagger UI - Interactive API documentation</li> </ul>"},{"location":"PROJECT_SUMMARY/#learning-resources","title":"\ud83c\udf93 Learning Resources","text":"<p>This project demonstrates: - RESTful API design - Clean architecture in Go - Repository pattern - Service layer pattern - Middleware pattern - Dependency injection - Unit testing strategies - Integration testing - Docker containerization - CI/CD workflows - API documentation - Security best practices</p>"},{"location":"PROJECT_SUMMARY/#why-this-stands-out","title":"\ud83c\udf1f Why This Stands Out","text":"<ol> <li>Complete - Not a minimal example, but production-ready</li> <li>Documented - Every feature is explained</li> <li>Tested - Comprehensive test coverage</li> <li>Modern - Latest Go features and practices</li> <li>Maintainable - Clean code, clear structure</li> <li>Scalable - Patterns that grow with your project</li> <li>Secure - Security best practices built-in</li> <li>Developer-Friendly - Great DX with docs, examples, tools</li> </ol>"},{"location":"PROJECT_SUMMARY/#development-workflow","title":"\ud83d\udd04 Development Workflow","text":"<pre><code># Development\nmake run          # Run locally\nmake test         # Run tests\nmake lint         # Check code quality\nmake swag         # Generate API docs\n\n# Docker\nmake docker-up    # Start containers\nmake docker-down  # Stop containers\n\n# Building\nmake build        # Build binary\nmake docker-build # Build Docker image\n</code></pre>"},{"location":"PROJECT_SUMMARY/#success-metrics","title":"\ud83c\udf89 Success Metrics","text":"<p>After using this boilerplate, you should be able to:</p> <ul> <li>\u2705 Build a new REST API endpoint in &lt; 30 minutes</li> <li>\u2705 Add authentication to any endpoint in &lt; 5 minutes</li> <li>\u2705 Write tests for your endpoints easily</li> <li>\u2705 Deploy to production with confidence</li> <li>\u2705 Scale your API as your project grows</li> </ul>"},{"location":"PROJECT_SUMMARY/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! See CONTRIBUTING.md for: - Code style guidelines - How to add features - Testing requirements - Pull request process</p>"},{"location":"PROJECT_SUMMARY/#license","title":"\ud83d\udcc4 License","text":"<p>MIT License - free to use, modify, and distribute.</p>"},{"location":"PROJECT_SUMMARY/#credits","title":"\ud83d\ude4f Credits","text":"<p>Built with \u2764\ufe0f using: - Gin Web Framework - GORM - golang-jwt - swaggo</p> <p>Ready to build something awesome? \u2b50 Star this repo and start coding!</p> <pre><code>git clone https://github.com/vahiiiid/go-rest-api-boilerplate.git\ncd go-rest-api-boilerplate\ndocker-compose up --build\n# Happy coding! \ud83d\ude80\n</code></pre>"},{"location":"QUICK_REFERENCE/","title":"\ud83d\ude80 Quick Reference Guide","text":"<p>A cheat sheet for common tasks and commands.</p>"},{"location":"QUICK_REFERENCE/#most-common-commands","title":"\ud83c\udfaf Most Common Commands","text":"<pre><code># Quick start (automated: install, verify, migrate, start)\nmake quick-start\n\n# Install development tools (swag, golangci-lint, migrate, air)\nmake install-tools\n\n# Verify everything is working\nmake verify\n\n# Start everything (Docker)\nmake up\n\n# Run locally\nmake run\n\n# Run tests\nmake test\n\n# Generate Swagger docs (only needed for native development)\nmake swag\n</code></pre>"},{"location":"QUICK_REFERENCE/#full-command-reference","title":"\ud83d\udccb Full Command Reference","text":""},{"location":"QUICK_REFERENCE/#make-commands","title":"Make Commands","text":"<pre><code>make help                # Show all available commands\nmake quick-start         # Complete automated setup (install, verify, migrate, start)\nmake install-tools       # Install dev tools (swag, lint, migrate, air)\nmake verify              # Verify project setup and dependencies\nmake up                  # Start Docker containers (dev)\nmake down                # Stop Docker containers (dev)\nmake run                 # Run application locally (host)\nmake build               # Build binary to bin/server\nmake docker-build        # Build Docker image\nmake docker-up           # Start docker-compose (development with hot-reload)\nmake docker-up-prod      # Start docker-compose (production)\nmake docker-down         # Stop docker-compose (development)\nmake docker-down-prod    # Stop docker-compose (production)\nmake test                # Run tests\nmake test-coverage       # Run tests with coverage\nmake swag                # Generate Swagger docs (native development only)\nmake lint                # Run linter\nmake lint-fix            # Run linter and auto-fix issues\nmake clean               # Clean build artifacts\nmake deps                # Download dependencies\nmake migrate-up          # Run database migrations (host)\nmake migrate-down        # Rollback last migration (host)\nmake migrate-status      # Show migration status (host)\n</code></pre>"},{"location":"QUICK_REFERENCE/#docker-commands","title":"Docker Commands","text":""},{"location":"QUICK_REFERENCE/#development-with-hot-reload","title":"Development (with hot-reload)","text":"<pre><code># Start services (development mode)\ndocker-compose up --build\n\n# Start in background\ndocker-compose up -d\n\n# Stop services\ndocker-compose down\n\n# Stop and remove volumes\ndocker-compose down -v\n\n# View logs\ndocker-compose logs -f app\n\n# Restart app only\ndocker-compose restart app\n\n# Build without cache\ndocker-compose build --no-cache\n</code></pre>"},{"location":"QUICK_REFERENCE/#production","title":"Production","text":"<pre><code># Start production build\ndocker-compose -f docker-compose.prod.yml up --build\n\n# Start in background\ndocker-compose -f docker-compose.prod.yml up -d\n\n# Stop production\ndocker-compose -f docker-compose.prod.yml down\n</code></pre>"},{"location":"QUICK_REFERENCE/#make-commands_1","title":"Make Commands","text":"<pre><code>make help                # Show all available commands\nmake quick-start         # Complete automated setup (install, verify, start)\nmake install-tools       # Install dev tools (swag, lint, migrate, air)\nmake verify              # Verify project setup and dependencies\nmake run                 # Run application locally\nmake build               # Build binary to bin/server\nmake docker-build        # Build Docker image\nmake docker-up           # Start docker-compose (development with hot-reload)\nmake docker-up-prod      # Start docker-compose (production)\nmake docker-down         # Stop docker-compose (development)\nmake docker-down-prod    # Stop docker-compose (production)\nmake test                # Run tests\nmake test-coverage       # Run tests with coverage\nmake swag                # Generate Swagger docs (native development only)\nmake lint                # Run linter\nmake lint-fix            # Run linter and auto-fix issues\nmake clean               # Clean build artifacts\nmake deps                # Download dependencies\nmake migrate-up          # Run database migrations (host)\nmake migrate-down        # Rollback last migration (host)\nmake migrate-create      # Create new migration file\nmake migrate-version     # Show current migration version (host)\nmake migrate-docker-up   # Run migrations inside Docker container\nmake migrate-docker-down # Rollback migration inside Docker\nmake migrate-docker-version # Show migration version inside Docker\n</code></pre>"},{"location":"QUICK_REFERENCE/#go-commands","title":"Go Commands","text":"<pre><code># Run application\ngo run ./cmd/server\n\n# Build binary\ngo build -o bin/server ./cmd/server\n\n# Run tests\ngo test ./...\ngo test ./... -v              # Verbose\ngo test ./... -cover          # With coverage\ngo test ./... -race           # Race detection\n\n# Check code\ngo vet ./...\ngo fmt ./...\n\n# Dependencies\ngo mod download\ngo mod tidy\ngo mod verify\n</code></pre>"},{"location":"QUICK_REFERENCE/#testing","title":"Testing","text":"<pre><code># Run all tests\ngo test ./... -v\n\n# Run specific test\ngo test ./tests -run TestRegisterHandler -v\n\n# With coverage\ngo test ./... -coverprofile=coverage.out\ngo tool cover -html=coverage.out\n\n# Race detection\ngo test ./... -race\n\n# Benchmark\ngo test ./... -bench=.\n</code></pre>"},{"location":"QUICK_REFERENCE/#swagger","title":"Swagger","text":"<pre><code># Docker: Swagger docs are generated automatically during build\ndocker-compose up --build\n\n# Native development: Generate docs manually\nmake swag\n# or\n./scripts/init-swagger.sh\n\n# Manual generation (if needed)\ngo install github.com/swaggo/swag/cmd/swag@latest\nswag init -g ./cmd/server/main.go -o ./api/docs\n\n# Format swagger comments\nswag fmt\n</code></pre>"},{"location":"QUICK_REFERENCE/#database","title":"Database","text":"<pre><code># Start PostgreSQL only\ndocker run -d --name go_api_db \\\n  -e POSTGRES_PASSWORD=postgres \\\n  -e POSTGRES_DB=go_api \\\n  -p 5432:5432 \\\n  postgres:15-alpine\n\n# Connect to database\ndocker exec -it go_api_db psql -U postgres -d go_api\n\n# View tables\n\\dt\n\n# View users\nSELECT * FROM users;\n\n# Check migration status\nSELECT * FROM schema_migrations;\n\n# Drop and recreate database\nDROP DATABASE go_api;\nCREATE DATABASE go_api;\n</code></pre>"},{"location":"QUICK_REFERENCE/#migrations","title":"Migrations","text":"<pre><code># Install migration tool\nmake install-tools\n\n# Run all migrations\nmake migrate-up\n\n# Check current version\nmake migrate-version\n\n# Rollback last migration\nmake migrate-down\n\n# Create new migration\nmake migrate-create NAME=add_user_avatar\n\n# Manual migration (without make)\nmigrate -path migrations \\\n  -database \"postgres://postgres:postgres@localhost:5432/go_api?sslmode=disable\" \\\n  up\n</code></pre>"},{"location":"QUICK_REFERENCE/#api-endpoints-quick-reference","title":"\ud83c\udf10 API Endpoints Quick Reference","text":""},{"location":"QUICK_REFERENCE/#authentication-public","title":"Authentication (Public)","text":"<pre><code># Register\nPOST /api/v1/auth/register\nBody: {\"name\": \"string\", \"email\": \"string\", \"password\": \"string\"}\n\n# Login\nPOST /api/v1/auth/login\nBody: {\"email\": \"string\", \"password\": \"string\"}\n</code></pre>"},{"location":"QUICK_REFERENCE/#users-protected-requires-bearer-token","title":"Users (Protected - Requires Bearer Token)","text":"<pre><code># Get user by ID\nGET /api/v1/users/:id\n\n# Update user\nPUT /api/v1/users/:id\nBody: {\"name\": \"string\", \"email\": \"string\"}\n\n# Delete user\nDELETE /api/v1/users/:id\n</code></pre>"},{"location":"QUICK_REFERENCE/#health-check-public","title":"Health Check (Public)","text":"<pre><code>GET /health\n</code></pre>"},{"location":"QUICK_REFERENCE/#api-testing","title":"\ud83d\udcdd API Testing","text":""},{"location":"QUICK_REFERENCE/#postman-collection","title":"Postman Collection","text":"<p>Pre-configured Postman collection with all endpoints, environment variables, and automated tests:</p> <p>Import the collection: <pre><code># File location\napi/postman_collection.json\n</code></pre></p> <p>Features: - \u2705 All API endpoints pre-configured - \u2705 Environment variables for token management - \u2705 Automated tests for responses - \u2705 Example payloads for all requests</p>"},{"location":"QUICK_REFERENCE/#curl-examples","title":"curl Examples","text":""},{"location":"QUICK_REFERENCE/#register-user","title":"Register User","text":"<pre><code>curl -i -X POST http://localhost:8080/api/v1/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"password123\"\n  }'\n</code></pre>"},{"location":"QUICK_REFERENCE/#login","title":"Login","text":"<pre><code>curl -i -X POST http://localhost:8080/api/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"john@example.com\",\n    \"password\": \"password123\"\n  }'\n</code></pre>"},{"location":"QUICK_REFERENCE/#get-user-by-id","title":"Get User by ID","text":"<pre><code>TOKEN=\"your-jwt-token-here\"\n\ncurl -i -X GET http://localhost:8080/api/v1/users/1 \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"QUICK_REFERENCE/#update-user","title":"Update User","text":"<pre><code>curl -i -X PUT http://localhost:8080/api/v1/users/1 \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Jane Doe\",\n    \"email\": \"jane@example.com\"\n  }'\n</code></pre>"},{"location":"QUICK_REFERENCE/#delete-user","title":"Delete User","text":"<pre><code>curl -i -X DELETE http://localhost:8080/api/v1/users/1 \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"QUICK_REFERENCE/#health-check","title":"Health Check","text":"<pre><code>curl -i http://localhost:8080/health\n</code></pre>"},{"location":"QUICK_REFERENCE/#environment-variables","title":"\ud83d\udd27 Environment Variables","text":"<p>New Viper-based configuration system with updated variable names:</p> <pre><code># Copy template\ncp .env.example .env\n\n# Edit values\nvim .env\n\n# Required variables (updated names)\nAPP_ENVIRONMENT=development\nDATABASE_HOST=db\nDATABASE_PORT=5432\nDATABASE_USER=postgres\nDATABASE_PASSWORD=postgres\nDATABASE_NAME=grab\nJWT_SECRET=your-secret-here\nJWT_TTLHOURS=24\nSERVER_PORT=8080\n</code></pre> <p>\ud83d\udcdd Variable Changes: - <code>DB_*</code> \u2192 <code>DATABASE_*</code> (e.g., <code>DB_HOST</code> \u2192 <code>DATABASE_HOST</code>) - <code>PORT</code> \u2192 <code>SERVER_PORT</code> - <code>ENV</code> \u2192 <code>APP_ENVIRONMENT</code> - <code>JWT_TTL_HOURS</code> \u2192 <code>JWT_TTLHOURS</code></p> <p>\ud83d\udd17 Complete reference: Configuration Guide</p>"},{"location":"QUICK_REFERENCE/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"QUICK_REFERENCE/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Find process using port 8080\nlsof -ti:8080\n\n# Kill process\nlsof -ti:8080 | xargs kill -9\n\n# Or use different port (updated variable name)\nexport SERVER_PORT=8081\n</code></pre>"},{"location":"QUICK_REFERENCE/#database-connection-failed","title":"Database Connection Failed","text":"<pre><code># Check if PostgreSQL is running\ndocker ps | grep postgres\n\n# Check logs\ndocker logs go_api_db\n\n# Restart database\ndocker-compose restart db\n</code></pre>"},{"location":"QUICK_REFERENCE/#tests-failing","title":"Tests Failing","text":"<pre><code># Clean and retry\ngo clean -testcache\ngo test ./... -v\n\n# Check specific test\ngo test ./tests -run TestName -v\n</code></pre>"},{"location":"QUICK_REFERENCE/#import-errors","title":"Import Errors","text":"<pre><code># Clean and download\ngo clean -modcache\ngo mod download\ngo mod tidy\n</code></pre>"},{"location":"QUICK_REFERENCE/#docker-build-issues","title":"Docker Build Issues","text":"<pre><code># Clean Docker cache\ndocker system prune -a\n\n# Rebuild without cache\ndocker-compose build --no-cache\n</code></pre>"},{"location":"QUICK_REFERENCE/#useful-one-liners","title":"\ud83d\udcca Useful One-Liners","text":"<pre><code># Count lines of Go code\nfind . -name '*.go' | xargs wc -l\n\n# Find TODO comments\ngrep -r \"TODO\" --include=\"*.go\"\n\n# Check test coverage\ngo test ./... -cover | grep coverage\n\n# Format all Go files\nfind . -name '*.go' | xargs gofmt -w\n\n# Find unused imports\ngo list -f '{{.Dir}}' ./... | xargs -I {} goimports -l {}\n\n# Run specific handler test\ngo test -v -run ^TestRegisterHandler$ ./tests\n</code></pre>"},{"location":"QUICK_REFERENCE/#generate-jwt-secret","title":"\ud83d\udd10 Generate JWT Secret","text":"<pre><code># Using openssl\nopenssl rand -hex 32\n\n# Using /dev/urandom\ncat /dev/urandom | head -c 32 | base64\n\n# Using Go\ngo run -e 'package main; import (\"crypto/rand\"; \"encoding/base64\"; \"fmt\"; \"os\"); func main() { b := make([]byte, 32); rand.Read(b); fmt.Println(base64.StdEncoding.EncodeToString(b)); os.Exit(0) }'\n</code></pre>"},{"location":"QUICK_REFERENCE/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code># Clone repository\ngit clone https://github.com/vahiiiid/go-rest-api-boilerplate.git\ncd go-rest-api-boilerplate\n\n# Install dependencies\ngo mod download\n\n# Install dev tools\nmake install-tools\n\n# Or manually\ngo install github.com/swaggo/swag/cmd/swag@latest\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n</code></pre>"},{"location":"QUICK_REFERENCE/#vs-code-settings","title":"\ud83c\udfa8 VS Code Settings","text":"<pre><code>{\n  \"go.useLanguageServer\": true,\n  \"go.lintTool\": \"golangci-lint\",\n  \"go.lintOnSave\": \"workspace\",\n  \"editor.formatOnSave\": true,\n  \"[go]\": {\n    \"editor.defaultFormatter\": \"golang.go\"\n  }\n}\n</code></pre>"},{"location":"QUICK_REFERENCE/#deployment","title":"\ud83d\udea2 Deployment","text":""},{"location":"QUICK_REFERENCE/#build-for-production","title":"Build for Production","text":"<pre><code># Build optimized binary\nCGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags=\"-w -s\" -o bin/server ./cmd/server\n\n# Build Docker image\ndocker build -t go-rest-api-boilerplate:v1.1.0 .\n\n# Run container (with updated environment variables)\ndocker run -p 8080:8080 --env-file .env go-rest-api-boilerplate:v1.1.0\n</code></pre>"},{"location":"QUICK_REFERENCE/#deploy-to-cloud","title":"Deploy to Cloud","text":"<pre><code># Tag and push to registry\ndocker tag go-rest-api-boilerplate:v1.1.0 your-registry/go-rest-api-boilerplate:v1.1.0\ndocker push your-registry/go-rest-api-boilerplate:v1.1.0\n\n# Pull and run on server (ensure .env has updated variable names)\ndocker pull your-registry/go-rest-api-boilerplate:v1.1.0\ndocker run -d -p 8080:8080 --env-file .env your-registry/go-rest-api-boilerplate:v1.1.0\n</code></pre>"},{"location":"QUICK_REFERENCE/#documentation-urls","title":"\ud83d\udcda Documentation URLs","text":"Resource URL Health Check http://localhost:8080/health Swagger UI http://localhost:8080/swagger/index.html API Base http://localhost:8080/api/v1"},{"location":"QUICK_REFERENCE/#helpful-links","title":"\ud83d\udd17 Helpful Links","text":"<ul> <li>Go Documentation</li> <li>Gin Framework</li> <li>GORM Guide</li> <li>Swagger Spec</li> <li>JWT.io</li> </ul> <p>Quick Help: Run <code>make verify</code> (or <code>./scripts/verify-setup.sh</code>) to check if everything is configured correctly!</p>"},{"location":"QUICK_REFERENCE/#helper-scripts","title":"\ud83d\udd27 Helper Scripts","text":"<p>All helper scripts can be run directly or via make commands:</p> <pre><code># Install Tools - install all development tools\n./scripts/install-tools.sh   # or: make install-tools\n\n# Quick start - automated setup (installs, verifies, starts)\n./scripts/quick-start.sh     # or: make quick-start\n\n# Verify - comprehensive setup check  \n./scripts/verify-setup.sh    # or: make verify\n\n# Init Swagger - generate API docs\n./scripts/init-swagger.sh    # or: make swag\n</code></pre>"},{"location":"QUICK_REFERENCE/#what-each-script-does","title":"What Each Script Does","text":"<p>install-tools.sh - Installs <code>swag</code> (Swagger generator) - Installs <code>golangci-lint</code> (Go linter) - Installs <code>migrate</code> (database migrations) - Installs <code>air</code> (hot-reload for development) - Checks if GOBIN is in PATH</p> <p>quick-start.sh - Runs <code>install-tools.sh</code> - Runs <code>verify-setup.sh</code> - Creates <code>.env</code> file - Generates Swagger docs - Starts Docker containers - Shows access points</p> <p>verify-setup.sh - Checks Go installation - Checks Docker installation - Verifies all dev tools installed - Checks project files exist - Validates Go code compiles - Runs all tests</p> <p>init-swagger.sh - Checks for swag installation - Generates Swagger documentation - Creates docs in <code>api/docs/</code></p>"},{"location":"RATE_LIMITING/","title":"Rate Limiting","text":""},{"location":"RATE_LIMITING/#overview","title":"Overview","text":"<p>The Go REST API Boilerplate includes a robust rate limiting middleware that protects your API from abuse and ensures fair usage across all clients. The rate limiter uses a token bucket algorithm with configurable limits and windows.</p>"},{"location":"RATE_LIMITING/#features","title":"Features","text":"<ul> <li>Token Bucket Algorithm: Allows burst traffic while maintaining average rate limits</li> <li>Per-IP Limiting: Rate limits are applied per client IP address</li> <li>Configurable Limits: Set custom request limits and time windows</li> <li>HTTP Headers: Provides standard rate limit headers for client awareness</li> <li>In-Memory Storage: Uses LRU cache with TTL for efficient memory usage</li> <li>Environment Configuration: Supports both YAML config and environment variables</li> </ul>"},{"location":"RATE_LIMITING/#configuration","title":"Configuration","text":""},{"location":"RATE_LIMITING/#yaml-configuration","title":"YAML Configuration","text":"<p>Add the following section to your <code>configs/config.yaml</code>:</p> <pre><code>ratelimit:\n  rate_limit_enabled: true\n  rate_limit_requests: 50\n  rate_limit_window: 1m\n</code></pre>"},{"location":"RATE_LIMITING/#environment-variables","title":"Environment Variables","text":"<p>You can override the configuration using environment variables:</p> <pre><code># Enable/disable rate limiting\nRATE_LIMIT_ENABLED=true\n\n# Number of requests allowed per window\nRATE_LIMIT_REQUESTS=100\n\n# Time window for rate limiting (Go duration format)\nRATE_LIMIT_WINDOW=5m\n</code></pre>"},{"location":"RATE_LIMITING/#configuration-options","title":"Configuration Options","text":"Option Type Default Description <code>rate_limit_enabled</code> boolean <code>false</code> Enable or disable rate limiting <code>rate_limit_requests</code> integer <code>50</code> Maximum requests allowed per window <code>rate_limit_window</code> duration <code>1m</code> Time window for rate limiting"},{"location":"RATE_LIMITING/#duration-format","title":"Duration Format","text":"<p>The <code>rate_limit_window</code> accepts Go duration format: - <code>1s</code> - 1 second - <code>1m</code> - 1 minute - <code>1h</code> - 1 hour - <code>30s</code> - 30 seconds - <code>5m</code> - 5 minutes</p>"},{"location":"RATE_LIMITING/#how-it-works","title":"How It Works","text":""},{"location":"RATE_LIMITING/#token-bucket-algorithm","title":"Token Bucket Algorithm","text":"<p>The rate limiter uses a token bucket algorithm that:</p> <ol> <li>Refills tokens at a steady rate based on your configuration</li> <li>Allows bursts up to the maximum request limit</li> <li>Blocks requests when no tokens are available</li> <li>Resets tokens after the specified time window</li> </ol>"},{"location":"RATE_LIMITING/#example-scenarios","title":"Example Scenarios","text":"<p>Configuration: 10 requests per minute</p> <ul> <li>Minute 1: Client makes 10 requests \u2192 Allowed (burst)</li> <li>Minute 1: Client makes 11<sup>th</sup> request \u2192 Blocked (429 error)</li> <li>Minute 2: Tokens refill \u2192 Client can make 10 more requests</li> </ul>"},{"location":"RATE_LIMITING/#ip-detection","title":"IP Detection","text":"<p>The rate limiter identifies clients by IP address using the following priority:</p> <ol> <li><code>ClientIP()</code> - Direct client IP</li> <li><code>X-Forwarded-For</code> header - For requests behind proxies</li> <li><code>X-Real-IP</code> header - Alternative proxy header</li> <li><code>\"unknown\"</code> - Fallback for test environments</li> </ol>"},{"location":"RATE_LIMITING/#http-headers","title":"HTTP Headers","text":""},{"location":"RATE_LIMITING/#success-response-headers","title":"Success Response Headers","text":"<p>When requests are allowed, the following headers are included:</p> <pre><code>X-RateLimit-Limit: 50\nX-RateLimit-Remaining: 45\nX-RateLimit-Reset: 1640995200\n</code></pre>"},{"location":"RATE_LIMITING/#rate-limit-exceeded-response","title":"Rate Limit Exceeded Response","text":"<p>When rate limits are exceeded, the server returns:</p> <p>Status Code: <code>429 Too Many Requests</code></p> <p>Headers: <pre><code>Retry-After: 30\nX-RateLimit-Limit: 50\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1640995200\n</code></pre></p> <p>Response Body: <pre><code>{\n  \"error\": \"Rate limit exceeded\",\n  \"message\": \"Too many requests. Please try again in 30 seconds.\",\n  \"retry_after\": 30\n}\n</code></pre></p>"},{"location":"RATE_LIMITING/#implementation-details","title":"Implementation Details","text":""},{"location":"RATE_LIMITING/#middleware-integration","title":"Middleware Integration","text":"<p>The rate limiter is integrated as global middleware in the router:</p> <pre><code>// Global rate-limit middleware (per client IP)\nrlCfg := cfg.Ratelimit\nif rlCfg.Enabled {\n    router.Use(\n        middleware.NewRateLimitMiddleware(\n            rlCfg.Window,\n            rlCfg.Requests,\n            func(c *gin.Context) string {\n                ip := c.ClientIP()\n                if ip == \"\" {\n                    // Fallback for test environments\n                    ip = c.GetHeader(\"X-Forwarded-For\")\n                    if ip == \"\" {\n                        ip = c.GetHeader(\"X-Real-IP\")\n                    }\n                    if ip == \"\" {\n                        ip = \"unknown\"\n                    }\n                }\n                return ip\n            },\n            nil, // default in-memory LRU\n        ),\n    )\n}\n</code></pre>"},{"location":"RATE_LIMITING/#storage-backend","title":"Storage Backend","text":"<p>The rate limiter uses an in-memory LRU cache with TTL:</p> <ul> <li>Cache Size: 5,000 entries (configurable)</li> <li>TTL: 6 hours (configurable)</li> <li>Storage: <code>github.com/hashicorp/golang-lru/v2/expirable</code></li> </ul>"},{"location":"RATE_LIMITING/#custom-storage","title":"Custom Storage","text":"<p>You can implement a custom storage backend by implementing the <code>Storage</code> interface:</p> <pre><code>type Storage interface {\n    Add(string, *rate.Limiter) bool\n    Get(string) (*rate.Limiter, bool)\n}\n</code></pre>"},{"location":"RATE_LIMITING/#usage-examples","title":"Usage Examples","text":""},{"location":"RATE_LIMITING/#basic-configuration","title":"Basic Configuration","text":"<pre><code># configs/config.yaml\nratelimit:\n  rate_limit_enabled: true\n  rate_limit_requests: 100\n  rate_limit_window: 1m\n</code></pre>"},{"location":"RATE_LIMITING/#strict-rate-limiting","title":"Strict Rate Limiting","text":"<pre><code># Very strict: 10 requests per minute\nratelimit:\n  rate_limit_enabled: true\n  rate_limit_requests: 10\n  rate_limit_window: 1m\n</code></pre>"},{"location":"RATE_LIMITING/#generous-rate-limiting","title":"Generous Rate Limiting","text":"<pre><code># Generous: 1000 requests per hour\nratelimit:\n  rate_limit_enabled: true\n  rate_limit_requests: 1000\n  rate_limit_window: 1h\n</code></pre>"},{"location":"RATE_LIMITING/#environment-based-configuration","title":"Environment-Based Configuration","text":"<pre><code># Production environment\nRATE_LIMIT_ENABLED=true\nRATE_LIMIT_REQUESTS=200\nRATE_LIMIT_WINDOW=5m\n\n# Development environment\nRATE_LIMIT_ENABLED=false\n</code></pre>"},{"location":"RATE_LIMITING/#testing","title":"Testing","text":""},{"location":"RATE_LIMITING/#unit-tests","title":"Unit Tests","text":"<p>The rate limiter includes comprehensive unit tests:</p> <pre><code># Run rate limiter tests\ngo test ./internal/middleware/ -v -run TestRateLimit\n\n# Run all tests\nmake test\n</code></pre>"},{"location":"RATE_LIMITING/#manual-testing","title":"Manual Testing","text":"<p>Test rate limiting with curl:</p> <pre><code># Test normal requests\nfor i in {1..10}; do\n  curl -X POST http://localhost:8080/api/v1/auth/login \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"email\":\"test@example.com\",\"password\":\"password\"}'\ndone\n\n# Test rate limit exceeded\ncurl -X POST http://localhost:8080/api/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"test@example.com\",\"password\":\"password\"}'\n</code></pre> <p>Expected response for rate limit exceeded: <pre><code>{\n  \"error\": \"Rate limit exceeded\",\n  \"message\": \"Too many requests. Please try again in 30 seconds.\",\n  \"retry_after\": 30\n}\n</code></pre></p>"},{"location":"RATE_LIMITING/#best-practices","title":"Best Practices","text":""},{"location":"RATE_LIMITING/#production-configuration","title":"Production Configuration","text":"<p>For production environments, consider these settings:</p> <pre><code>ratelimit:\n  rate_limit_enabled: true\n  rate_limit_requests: 100\n  rate_limit_window: 1m\n</code></pre>"},{"location":"RATE_LIMITING/#development-configuration","title":"Development Configuration","text":"<p>For development, you might want more lenient limits:</p> <pre><code>ratelimit:\n  rate_limit_enabled: true\n  rate_limit_requests: 1000\n  rate_limit_window: 1m\n</code></pre>"},{"location":"RATE_LIMITING/#testing-configuration","title":"Testing Configuration","text":"<p>For testing, disable rate limiting:</p> <pre><code>ratelimit:\n  rate_limit_enabled: false\n</code></pre>"},{"location":"RATE_LIMITING/#monitoring","title":"Monitoring","text":"<p>Monitor rate limit metrics:</p> <ul> <li>Track 429 responses in your logs</li> <li>Monitor <code>X-RateLimit-Remaining</code> headers</li> <li>Set up alerts for high rate limit usage</li> </ul>"},{"location":"RATE_LIMITING/#troubleshooting","title":"Troubleshooting","text":""},{"location":"RATE_LIMITING/#common-issues","title":"Common Issues","text":""},{"location":"RATE_LIMITING/#rate-limiting-not-working","title":"Rate Limiting Not Working","text":"<p>Problem: Requests are not being rate limited.</p> <p>Solutions: 1. Check if <code>rate_limit_enabled</code> is set to <code>true</code> 2. Verify configuration is loaded correctly 3. Check middleware is registered in router</p>"},{"location":"RATE_LIMITING/#too-strict-rate-limiting","title":"Too Strict Rate Limiting","text":"<p>Problem: Legitimate users are being blocked.</p> <p>Solutions: 1. Increase <code>rate_limit_requests</code> value 2. Increase <code>rate_limit_window</code> duration 3. Consider implementing user-based rate limiting</p>"},{"location":"RATE_LIMITING/#memory-usage","title":"Memory Usage","text":"<p>Problem: High memory usage with many unique IPs.</p> <p>Solutions: 1. Reduce <code>DefaultCacheSize</code> (currently 5,000) 2. Reduce <code>DefaultTTL</code> (currently 6 hours) 3. Implement Redis-based storage for distributed systems</p>"},{"location":"RATE_LIMITING/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to troubleshoot:</p> <pre><code>logging:\n  level: debug\n</code></pre>"},{"location":"RATE_LIMITING/#health-check","title":"Health Check","text":"<p>The <code>/health</code> endpoint is not rate limited, so you can always check server status.</p>"},{"location":"RATE_LIMITING/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"RATE_LIMITING/#custom-key-function","title":"Custom Key Function","text":"<p>You can customize how clients are identified by providing a custom key function:</p> <pre><code>// Rate limit per user ID instead of IP\nrouter.Use(middleware.NewRateLimitMiddleware(\n    rlCfg.Window,\n    rlCfg.Requests,\n    func(c *gin.Context) string {\n        // Extract user ID from JWT token\n        userID := getUserIDFromToken(c)\n        return userID\n    },\n    nil,\n))\n</code></pre>"},{"location":"RATE_LIMITING/#multiple-rate-limits","title":"Multiple Rate Limits","text":"<p>You can apply different rate limits to different route groups:</p> <pre><code>// Strict rate limiting for auth endpoints\nauthGroup := v1.Group(\"/auth\")\nauthGroup.Use(middleware.NewRateLimitMiddleware(\n    1*time.Minute, // 1 minute window\n    5,             // 5 requests\n    ipKeyFunc,\n    nil,\n))\n\n// More lenient rate limiting for other endpoints\napiGroup := v1.Group(\"/api\")\napiGroup.Use(middleware.NewRateLimitMiddleware(\n    1*time.Minute, // 1 minute window\n    100,           // 100 requests\n    ipKeyFunc,\n    nil,\n))\n</code></pre>"},{"location":"RATE_LIMITING/#security-considerations","title":"Security Considerations","text":""},{"location":"RATE_LIMITING/#ddos-protection","title":"DDoS Protection","text":"<p>The rate limiter provides basic DDoS protection by: - Limiting requests per IP address - Using efficient in-memory storage - Providing immediate feedback to clients</p>"},{"location":"RATE_LIMITING/#bypass-prevention","title":"Bypass Prevention","text":"<p>To prevent bypass attempts: - Use consistent IP detection logic - Consider implementing additional security layers - Monitor for suspicious patterns</p>"},{"location":"RATE_LIMITING/#distributed-systems","title":"Distributed Systems","text":"<p>For distributed deployments: - Consider Redis-based storage - Implement consistent hashing - Use load balancer IP forwarding</p>"},{"location":"RATE_LIMITING/#performance-impact","title":"Performance Impact","text":""},{"location":"RATE_LIMITING/#memory-usage_1","title":"Memory Usage","text":"<ul> <li>Per IP: ~1KB of memory</li> <li>Default Cache: ~5MB for 5,000 IPs</li> <li>TTL: Automatic cleanup after 6 hours</li> </ul>"},{"location":"RATE_LIMITING/#cpu-impact","title":"CPU Impact","text":"<ul> <li>Minimal: O(1) operations for token bucket</li> <li>Efficient: LRU cache with TTL</li> <li>Scalable: Handles thousands of concurrent requests</li> </ul>"},{"location":"RATE_LIMITING/#migration-guide","title":"Migration Guide","text":""},{"location":"RATE_LIMITING/#from-no-rate-limiting","title":"From No Rate Limiting","text":"<ol> <li>Add rate limiter configuration to <code>config.yaml</code></li> <li>Set conservative limits initially</li> <li>Monitor and adjust based on usage patterns</li> <li>Enable in production after testing</li> </ol>"},{"location":"RATE_LIMITING/#updating-existing-configuration","title":"Updating Existing Configuration","text":"<ol> <li>Update <code>config.yaml</code> with new values</li> <li>Restart the application</li> <li>Monitor rate limit headers</li> <li>Adjust if needed</li> </ol>"},{"location":"RATE_LIMITING/#related-documentation","title":"Related Documentation","text":"<ul> <li>Configuration Guide</li> <li>Middleware Documentation</li> <li>Security Best Practices</li> <li>API Documentation</li> </ul>"},{"location":"RATE_LIMITING/#support","title":"Support","text":"<p>For questions or issues with the rate limiter:</p> <ol> <li>Check this documentation</li> <li>Review the troubleshooting section</li> <li>Open an issue on GitHub</li> <li>Check existing discussions</li> </ol> <p>Last updated: January 2025</p>"},{"location":"SETUP/","title":"Setup Guide","text":"<p>Complete setup instructions for the Go REST API Boilerplate (GRAB).</p>"},{"location":"SETUP/#prerequisites","title":"\ud83d\udccb Prerequisites","text":""},{"location":"SETUP/#required-for-docker-setup-recommended","title":"Required for Docker Setup (Recommended)","text":"<ul> <li>Docker (Download)</li> <li>Docker Compose (Download)</li> <li>Git (Download)</li> </ul>"},{"location":"SETUP/#required-for-manual-setup","title":"Required for Manual Setup","text":"<ul> <li>Go 1.24+ (Download)</li> <li>PostgreSQL 15+ (Download)</li> <li>Git (Download)</li> <li>Make (usually pre-installed on Unix systems)</li> </ul>"},{"location":"SETUP/#quick-start-recommended","title":"\ud83d\ude80 Quick Start (Recommended)","text":"<p>The fastest way to get started is using Docker with our automated setup:</p>"},{"location":"SETUP/#one-command-setup","title":"One-Command Setup \u26a1","text":"<pre><code># 1. Clone the repository\ngit clone https://github.com/vahiiiid/go-rest-api-boilerplate.git\ncd go-rest-api-boilerplate\n\n# 2. Run quick start (installs tools, verifies, runs migrations, starts containers)\nmake quick-start\n</code></pre> <p>\ud83c\udf89 Done! Your API is now running at:</p> <ul> <li>API Base URL: http://localhost:8080/api/v1</li> <li>Swagger UI: http://localhost:8080/swagger/index.html</li> <li>Health Check: http://localhost:8080/health</li> </ul>"},{"location":"SETUP/#what-just-happened","title":"What Just Happened?","text":"<p>The <code>quick-start</code> command automatically:</p> <ol> <li>\u2705 Checked Docker and Docker Compose installation</li> <li>\u2705 Created <code>.env</code> file from template</li> <li>\u2705 Built Docker images with all development tools</li> <li>\u2705 Started PostgreSQL and application containers</li> <li>\u2705 Ran database migrations (with robust error handling and status checks)</li> <li>\u2705 Generated Swagger documentation</li> </ol>"},{"location":"SETUP/#try-it-out","title":"Try It Out \ud83e\uddea","text":"<pre><code># Check health\ncurl http://localhost:8080/health\n\n# Register a user\ncurl -X POST http://localhost:8080/api/v1/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Alice Smith\",\n    \"email\": \"alice@example.com\",\n    \"password\": \"secret123\"\n  }'\n</code></pre>"},{"location":"SETUP/#explore-your-api","title":"Explore Your API \ud83d\udd0d","text":"<p>Interactive Swagger Documentation:</p> <p>Open http://localhost:8080/swagger/index.html to explore and test all endpoints interactively.</p> <p>Or Use Postman Collection:</p> <p>Import the pre-configured collection from <code>api/postman_collection.json</code> with example requests and tests.</p>"},{"location":"SETUP/#docker-development-setup","title":"\ud83d\udc33 Docker Development Setup","text":"<p>For ongoing development with hot-reload and live code synchronization.</p>"},{"location":"SETUP/#start-development-environment","title":"Start Development Environment","text":"<pre><code># Start containers with hot-reload\nmake up\n\n# View logs\nmake logs\n\n# Stop containers\nmake down\n</code></pre>"},{"location":"SETUP/#development-workflow","title":"Development Workflow","text":"<pre><code># Edit code in your IDE\n# Changes auto-reload in ~2 seconds! \u2728\n\n# Check code quality\nmake lint\n\n# Fix linting issues\nmake lint-fix\n\n# Run tests\nmake test\n\n# View test coverage\nmake test-coverage\n\n# Generate/update Swagger docs (only needed for native development)\nmake swag\n\n\n# Run database migrations (host)\nmake migrate-up\n\n# Rollback last migration (host)\nmake migrate-down\n\n# Show migration status (host)\nmake migrate-status\n</code></pre>"},{"location":"SETUP/#container-details","title":"Container Details","text":"<p>Development Container: - Base: <code>golang:1.24-bookworm</code> (Debian for SQLite compatibility) - Includes: <code>air</code>, <code>swag</code>, <code>golangci-lint</code>, <code>migrate</code> - Hot-reload: Changes detected in ~2 seconds - Volume: Code synced from host to container</p> <p>Database Container: - Image: <code>postgres:15-alpine</code> - Port: <code>5432</code> (only accessible within Docker network) - Data: Persisted in Docker volume</p>"},{"location":"SETUP/#accessing-containers","title":"Accessing Containers","text":"<pre><code># Access application container\ndocker exec -it go_api_app bash\n\n# Access database container\ndocker exec -it go_api_db psql -U postgres -d go_api_db\n\n# View container logs\ndocker logs go_api_app -f\ndocker logs go_api_db -f\n</code></pre>"},{"location":"SETUP/#manual-development-setup","title":"\ud83d\udcbb Manual Development Setup","text":"<p>For developers who prefer to run the application directly on their host machine.</p>"},{"location":"SETUP/#step-1-install-go","title":"Step 1: Install Go","text":"<p>Ensure you have Go 1.24 or later installed:</p> <pre><code># Check Go version\ngo version\n\n# Should output: go version go1.24.x ...\n</code></pre> <p>If Go is not installed, download it from https://golang.org/dl/</p>"},{"location":"SETUP/#step-2-install-postgresql","title":"Step 2: Install PostgreSQL","text":"<p>Install and start PostgreSQL 15+:</p> <p>macOS (Homebrew): <pre><code>brew install postgresql@15\nbrew services start postgresql@15\n</code></pre></p> <p>Ubuntu/Debian: <pre><code>sudo apt update\nsudo apt install postgresql-15\nsudo systemctl start postgresql\n</code></pre></p> <p>Windows: Download from https://www.postgresql.org/download/windows/</p>"},{"location":"SETUP/#step-3-create-database","title":"Step 3: Create Database","text":"<pre><code># Access PostgreSQL\npsql -U postgres\n\n# Create database and user\nCREATE DATABASE go_api_db;\nCREATE USER go_api_user WITH PASSWORD 'your_password';\nGRANT ALL PRIVILEGES ON DATABASE go_api_db TO go_api_user;\n\\q\n</code></pre>"},{"location":"SETUP/#step-4-clone-repository","title":"Step 4: Clone Repository","text":"<pre><code>git clone https://github.com/vahiiiid/go-rest-api-boilerplate.git\ncd go-rest-api-boilerplate\n</code></pre>"},{"location":"SETUP/#step-5-install-development-tools","title":"Step 5: Install Development Tools","text":"<pre><code># Install Swagger generator\ngo install github.com/swaggo/swag/cmd/swag@latest\n\n# Install linter\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n\n# Install migration tool\ngo install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest\n\n# Install hot-reload tool (optional for development)\ngo install github.com/air-verse/air@v1.52.3\n</code></pre>"},{"location":"SETUP/#step-6-configure-environment","title":"Step 6: Configure Environment","text":"<p>The application uses a layered configuration system with Viper that supports:</p> <ol> <li>Environment variables (highest priority)</li> <li>Environment-specific config files (e.g., <code>config.development.yaml</code>)</li> <li>Base config file (<code>config.yaml</code>) (lowest priority)</li> </ol> <pre><code># Copy environment template\ncp .env.example .env\n\n# Edit .env file\nnano .env\n</code></pre> <p>Update these values using the new environment variable names: <pre><code># App Configuration\nAPP_NAME=\"GRAB API\"\nAPP_ENVIRONMENT=development\nAPP_DEBUG=true\n\n# Database Configuration (updated variable names)\nDATABASE_HOST=localhost\nDATABASE_PORT=5432\nDATABASE_USER=go_api_user\nDATABASE_PASSWORD=your_password\nDATABASE_NAME=go_api_db\nDATABASE_SSLMODE=disable\n\n# JWT Configuration\nJWT_SECRET=your-secret-key-change-this-in-production\nJWT_TTLHOURS=24\n\n# Server Configuration  \nSERVER_PORT=8080\nSERVER_READTIMEOUT=10\nSERVER_WRITETIMEOUT=10\n\n# Logging Configuration\nLOGGING_LEVEL=info\n\n# Rate Limiting Configuration\nRATELIMIT_ENABLED=false\nRATELIMIT_REQUESTS=100\nRATELIMIT_WINDOW=1m\n</code></pre></p> <p>Note: The variable names have changed from the old format (e.g., <code>DB_HOST</code> \u2192 <code>DATABASE_HOST</code>). See the Configuration Guide for complete details on all available settings and precedence rules.</p>"},{"location":"SETUP/#step-7-install-dependencies","title":"Step 7: Install Dependencies","text":"<pre><code># Download Go modules\ngo mod download\n</code></pre>"},{"location":"SETUP/#step-8-generate-swagger-documentation","title":"Step 8: Generate Swagger Documentation","text":"<p>Note: If you're using Docker (recommended), Swagger docs are automatically generated during the Docker build process. You only need to run this step if you're running the application directly on your host machine.</p> <pre><code># Generate Swagger docs (only needed for native/local development)\nswag init -g cmd/server/main.go -o ./api/docs\n</code></pre>"},{"location":"SETUP/#step-9-run-database-migrations","title":"Step 9: Run Database Migrations","text":"<pre><code># Run migrations (if you have migration files)\nmigrate -path migrations -database \"postgresql://go_api_user:your_password@localhost:5432/go_api_db?sslmode=disable\" up\n\n# Or use GORM AutoMigrate (happens automatically on first run)\n</code></pre>"},{"location":"SETUP/#step-10-run-the-application","title":"Step 10: Run the Application","text":"<p>Option 1: Using Make (with hot-reload) <pre><code># Build and run binary\nmake run-binary\n</code></pre></p> <p>Option 2: Using Go directly <pre><code># Run with go run\ngo run cmd/server/main.go\n\n# Or build and run binary\ngo build -o bin/server cmd/server/main.go\n./bin/server\n</code></pre></p> <p>Option 3: Using Air (hot-reload) <pre><code># Run with hot-reload\nair -c .air.toml\n</code></pre></p>"},{"location":"SETUP/#verify-installation","title":"Verify Installation","text":"<pre><code># Check health endpoint\ncurl http://localhost:8080/health\n\n# Open Swagger UI\nopen http://localhost:8080/swagger/index.html\n</code></pre>"},{"location":"SETUP/#development-commands","title":"Development Commands","text":"<pre><code># Run tests\ngo test ./...\n\n# Run tests with coverage\ngo test -v -cover ./...\n\n# Generate coverage report\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out -o coverage.html\n\n# Run linter\ngolangci-lint run\n\n# Fix linting issues\ngolangci-lint run --fix\n\n# Update Swagger docs (only needed for native development)\nswag init -g cmd/server/main.go -o ./api/docs\n\n# Create new migration\nmigrate create -ext sql -dir migrations -seq your_migration_name\n</code></pre>"},{"location":"SETUP/#production-deployment","title":"\ud83c\udfed Production Deployment","text":""},{"location":"SETUP/#option-1-docker-production-build","title":"Option 1: Docker Production Build","text":"<p>Build production image: <pre><code># Build optimized production image\ndocker build --target production -t go-api:latest .\n</code></pre></p> <p>The production image: - Base: <code>alpine:latest</code> (minimal size ~20MB) - Binary: Statically compiled with <code>CGO_ENABLED=0</code> - No development tools included - Optimized for security and performance</p> <p>Run production container: <pre><code># Run with environment variables\ndocker run -d \\\n  --name go-api \\\n  -p 8080:8080 \\\n  -e DB_HOST=your-db-host \\\n  -e DB_PORT=5432 \\\n  -e DB_USER=your-db-user \\\n  -e DB_PASSWORD=your-db-password \\\n  -e DB_NAME=your-db-name \\\n  -e JWT_SECRET=your-production-secret \\\n  go-api:latest\n</code></pre></p> <p>Using docker-compose for production: <pre><code>version: '3.8'\n\nservices:\n  app:\n    image: go-api:latest\n    ports:\n      - \"8080:8080\"\n    environment:\n      - DB_HOST=db\n      - DB_PORT=5432\n      - DB_USER=${DB_USER}\n      - DB_PASSWORD=${DB_PASSWORD}\n      - DB_NAME=${DB_NAME}\n      - JWT_SECRET=${JWT_SECRET}\n    depends_on:\n      - db\n    restart: unless-stopped\n\n  db:\n    image: postgres:15-alpine\n    environment:\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_DB=${DB_NAME}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n</code></pre></p>"},{"location":"SETUP/#option-2-native-binary-deployment","title":"Option 2: Native Binary Deployment","text":"<p>Build for production: <pre><code># Build optimized binary\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \\\n  -a -installsuffix cgo \\\n  -ldflags=\"-w -s\" \\\n  -o bin/server \\\n  ./cmd/server\n\n# Binary is now in bin/server\n</code></pre></p> <p>Deploy binary: <pre><code># 1. Copy binary to server\nscp bin/server user@your-server:/opt/go-api/\n\n# 2. Copy .env file (with production values)\nscp .env user@your-server:/opt/go-api/\n\n# 3. SSH to server and run\nssh user@your-server\ncd /opt/go-api\n./server\n</code></pre></p> <p>Using systemd service:</p> <p>Create <code>/etc/systemd/system/go-api.service</code>: <pre><code>[Unit]\nDescription=Go REST API Service\nAfter=network.target postgresql.service\n\n[Service]\nType=simple\nUser=go-api\nWorkingDirectory=/opt/go-api\nEnvironmentFile=/opt/go-api/.env\nExecStart=/opt/go-api/server\nRestart=on-failure\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>Enable and start: <pre><code>sudo systemctl enable go-api\nsudo systemctl start go-api\nsudo systemctl status go-api\n</code></pre></p>"},{"location":"SETUP/#production-checklist","title":"Production Checklist","text":"<p>Security Checklist</p> <ul> <li> Change <code>JWT_SECRET</code> to a strong, random value (min 32 characters)</li> <li> Use strong database passwords</li> <li> Enable HTTPS/TLS (use reverse proxy like Nginx)</li> <li> Configure proper CORS origins (not <code>*</code>)</li> <li> Set up rate limiting</li> <li> Enable database connection encryption</li> <li> Regular dependency updates</li> <li> Set up monitoring and logging</li> <li> Configure firewall rules</li> <li> Use environment variables (never hardcode secrets)</li> <li> Set up automated backups</li> <li> Configure log rotation</li> </ul>"},{"location":"SETUP/#reverse-proxy-nginx","title":"Reverse Proxy (Nginx)","text":"<p>Example Nginx configuration:</p> <pre><code>server {\n    listen 80;\n    server_name api.yourdomain.com;\n\n    # Redirect to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name api.yourdomain.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"SETUP/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"SETUP/#docker-issues","title":"Docker Issues","text":"<p>Containers not starting: <pre><code># Check logs\nmake logs\n\n# Rebuild containers\nmake rebuild\n</code></pre></p> <p>Port already in use: <pre><code># Check what's using port 8080\nlsof -i :8080\n\n# Kill the process or change port in docker-compose.yml\n</code></pre></p> <p>Database connection refused: <pre><code># Ensure database container is running\ndocker ps | grep go_api_db\n\n# Check database logs\ndocker logs go_api_db\n</code></pre></p>"},{"location":"SETUP/#manual-setup-issues","title":"Manual Setup Issues","text":"<p>Go tools not found: <pre><code># Ensure GOPATH/bin is in your PATH\nexport PATH=$PATH:$(go env GOPATH)/bin\n\n# Add to ~/.bashrc or ~/.zshrc for persistence\necho 'export PATH=$PATH:$(go env GOPATH)/bin' &gt;&gt; ~/.bashrc\n</code></pre></p> <p>Database connection failed: <pre><code># Test PostgreSQL connection\npsql -h localhost -U go_api_user -d go_api_db\n\n# Check PostgreSQL is running\n# macOS:\nbrew services list | grep postgresql\n\n# Linux:\nsudo systemctl status postgresql\n</code></pre></p> <p>Swagger docs not found: <pre><code># Regenerate Swagger docs\nswag init -g cmd/server/main.go -o ./docs/swagger\n\n# Ensure docs/swagger directory exists\nls -la docs/swagger\n</code></pre></p>"},{"location":"SETUP/#next-steps","title":"\ud83d\udcda Next Steps","text":"<ul> <li>Development Guide - Learn how to build features</li> <li>Docker Guide - Deep dive into Docker setup</li> <li>Quick Reference - Command cheat sheet</li> <li>TODO Example - Step-by-step tutorial</li> </ul>"},{"location":"SWAGGER/","title":"\ud83d\udcda Swagger Documentation Guide","text":"<p>Complete guide for generating and using Swagger/OpenAPI documentation.</p>"},{"location":"SWAGGER/#swagger-ui-preview","title":"\ud83c\udfa8 Swagger UI Preview","text":"<p>Interactive API documentation with \"Try it out\" feature available at <code>http://localhost:8080/swagger/index.html</code></p>"},{"location":"SWAGGER/#quick-start","title":"\ud83c\udfaf Quick Start","text":""},{"location":"SWAGGER/#option-1-docker-automatic-recommended","title":"Option 1: Docker (Automatic - Recommended)","text":"<p>Swagger docs are automatically generated during Docker build! No manual steps needed when using Docker.</p> <pre><code># Just start the containers - swagger docs are generated automatically\ndocker-compose up --build\n</code></pre>"},{"location":"SWAGGER/#option-2-using-make-for-native-development","title":"Option 2: Using Make (For Native Development)","text":"<pre><code>make swag\n</code></pre>"},{"location":"SWAGGER/#option-3-using-script-directly","title":"Option 3: Using Script Directly","text":"<pre><code>./scripts/init-swagger.sh\n</code></pre>"},{"location":"SWAGGER/#option-4-manual","title":"Option 4: Manual","text":"<pre><code># Install swag CLI (first time only)\ngo install github.com/swaggo/swag/cmd/swag@latest\n\n# Generate docs\nswag init -g ./cmd/server/main.go -o ./api/docs\n</code></pre>"},{"location":"SWAGGER/#when-to-generate-swagger-docs","title":"\ud83d\udccd When to Generate Swagger Docs","text":""},{"location":"SWAGGER/#docker-development-automatic","title":"\u2705 Docker Development (Automatic)","text":"<p>Swagger docs are automatically generated during Docker build! The Dockerfile includes <code>RUN make swag</code> which generates the docs as part of the build process.</p> <pre><code># Just start containers - docs are generated automatically\ndocker-compose up --build\n</code></pre> <p>Benefits: - No manual steps required - Docs are always up-to-date - Consistent across environments - Works out of the box</p>"},{"location":"SWAGGER/#native-development-manual","title":"\u2705 Native Development (Manual)","text":"<p>Only needed when running the application directly on your host machine:</p> <pre><code># Generate swagger docs for native development\nmake swag\n</code></pre> <p>When to use: - Running <code>go run cmd/server/main.go</code> directly - Building binary with <code>go build</code> - Not using Docker containers</p>"},{"location":"SWAGGER/#setup-for-native-development-only","title":"\ud83d\udee0\ufe0f Setup (For Native Development Only)","text":"<p>Note: If you're using Docker, Swagger docs are generated automatically. You only need this setup for native development.</p>"},{"location":"SWAGGER/#1-install-swag-cli","title":"1. Install Swag CLI","text":"<pre><code>go install github.com/swaggo/swag/cmd/swag@latest\n</code></pre>"},{"location":"SWAGGER/#2-add-to-path-if-needed","title":"2. Add to PATH (if needed)","text":"<p>If you get \"swag: command not found\":</p> <p>macOS/Linux: <pre><code># Add to ~/.bashrc or ~/.zshrc\nexport PATH=\"$PATH:$HOME/go/bin\"\n\n# Then reload\nsource ~/.bashrc  # or source ~/.zshrc\n</code></pre></p> <p>Windows (PowerShell): <pre><code># Add to PATH\n$env:Path += \";$env:USERPROFILE\\go\\bin\"\n</code></pre></p>"},{"location":"SWAGGER/#3-verify-installation","title":"3. Verify Installation","text":"<pre><code>swag --version\n</code></pre> <p>Should output: <code>swag version v1.x.x</code></p>"},{"location":"SWAGGER/#how-it-works","title":"\ud83d\udcdd How It Works","text":""},{"location":"SWAGGER/#1-swagger-annotations","title":"1. Swagger Annotations","text":"<p>API endpoints are annotated in code with swagger comments:</p> <pre><code>// @Summary Register a new user\n// @Description Register a new user with name, email and password\n// @Tags auth\n// @Accept json\n// @Produce json\n// @Param request body RegisterRequest true \"Registration request\"\n// @Success 200 {object} AuthResponse\n// @Failure 400 {object} map[string]string\n// @Router /api/v1/auth/register [post]\nfunc (h *Handler) Register(c *gin.Context) {\n    // Handler code...\n}\n</code></pre>"},{"location":"SWAGGER/#2-generation-process","title":"2. Generation Process","text":"<p>When you run <code>make swag</code>, it: 1. Scans your Go code for swagger annotations 2. Generates three files in <code>api/docs/</code>:    - <code>docs.go</code> - Go code    - <code>swagger.json</code> - JSON spec    - <code>swagger.yaml</code> - YAML spec</p>"},{"location":"SWAGGER/#3-access-swagger-ui","title":"3. Access Swagger UI","text":"<p>Start the server and visit: <pre><code>http://localhost:8080/swagger/index.html\n</code></pre></p>"},{"location":"SWAGGER/#generated-files","title":"\ud83d\udcc2 Generated Files","text":"<p>After running <code>make swag</code>:</p> <pre><code>api/docs/\n\u251c\u2500\u2500 docs.go          # Generated Go code (DO NOT EDIT)\n\u251c\u2500\u2500 swagger.json     # OpenAPI 3.0 spec in JSON\n\u2514\u2500\u2500 swagger.yaml     # OpenAPI 3.0 spec in YAML\n</code></pre> <p>Note: These files are in <code>.gitignore</code> because they're generated.</p>"},{"location":"SWAGGER/#when-to-regenerate","title":"\ud83d\udd04 When to Regenerate","text":"<p>Regenerate swagger docs when you: - \u2705 Add new API endpoints - \u2705 Modify existing endpoint signatures - \u2705 Change request/response structures - \u2705 Update API documentation - \u2705 Change route paths or methods</p>"},{"location":"SWAGGER/#common-swagger-annotations","title":"\ud83d\udccb Common Swagger Annotations","text":""},{"location":"SWAGGER/#endpoint-documentation","title":"Endpoint Documentation","text":"<pre><code>// @Summary      Short description\n// @Description  Detailed description\n// @Tags         tag-name\n// @Accept       json\n// @Produce      json\n// @Param        name query string false \"Description\"\n// @Success      200 {object} ResponseType\n// @Failure      400 {object} ErrorType\n// @Router       /api/v1/path [method]\n</code></pre>"},{"location":"SWAGGER/#authentication","title":"Authentication","text":"<pre><code>// @Security BearerAuth\n</code></pre>"},{"location":"SWAGGER/#request-body","title":"Request Body","text":"<pre><code>// @Param request body RequestDTO true \"Request description\"\n</code></pre>"},{"location":"SWAGGER/#query-parameters","title":"Query Parameters","text":"<pre><code>// @Param page query int false \"Page number\" default(1)\n// @Param size query int false \"Page size\" default(10)\n</code></pre>"},{"location":"SWAGGER/#path-parameters","title":"Path Parameters","text":"<pre><code>// @Param id path int true \"User ID\"\n</code></pre>"},{"location":"SWAGGER/#main-api-documentation","title":"\ud83c\udfa8 Main API Documentation","text":"<p>In <code>cmd/server/main.go</code>:</p> <pre><code>// @title           Go REST API Boilerplate\n// @version         1.0\n// @description     A production-ready REST API boilerplate in Go\n// @termsOfService  http://swagger.io/terms/\n\n// @contact.name   API Support\n// @contact.email  support@example.com\n\n// @license.name  MIT\n// @license.url   https://opensource.org/licenses/MIT\n\n// @host      localhost:8080\n// @BasePath  /\n\n// @securityDefinitions.apikey BearerAuth\n// @in header\n// @name Authorization\n</code></pre>"},{"location":"SWAGGER/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"SWAGGER/#issue-swag-command-not-found","title":"Issue: \"swag: command not found\"","text":"<p>Solution 1: Install swag <pre><code>go install github.com/swaggo/swag/cmd/swag@latest\n</code></pre></p> <p>Solution 2: Add to PATH <pre><code>export PATH=\"$PATH:$HOME/go/bin\"\n</code></pre></p> <p>Solution 3: Use full path <pre><code>$HOME/go/bin/swag init -g ./cmd/server/main.go -o ./api/docs\n</code></pre></p>"},{"location":"SWAGGER/#issue-cannot-find-package-docs","title":"Issue: \"Cannot find package docs\"","text":"<p>Problem: Server can't find generated swagger docs.</p> <p>Solution:  - If using Docker: Docs are generated automatically during build - If running natively: Make sure you've run <code>make swag</code> before starting the server</p>"},{"location":"SWAGGER/#issue-failed-to-load-api-definition-internal-server-error-docjson","title":"Issue: \"Failed to load API definition\" / \"Internal Server Error doc.json\"","text":"<p>Problem: Swagger UI loads but shows error fetching doc.json.</p> <p>Symptoms: - Swagger UI page appears but shows \"Failed to load API definition\" - Browser console shows: \"Internal Server Error doc.json\" - Files exist in <code>api/docs/</code> but aren't served</p> <p>Solution: The swagger docs package must be imported in <code>cmd/server/main.go</code>:</p> <pre><code>import (\n    _ \"github.com/vahiiiid/go-rest-api-boilerplate/api/docs\" // swagger docs\n    // ... other imports\n)\n</code></pre> <p>Why? - The blank import <code>_</code> runs the <code>init()</code> function in docs package - This registers the swagger spec with swag library - Without it, Gin's swagger handler can't find the API definition</p> <p>Steps to fix: 1. Ensure <code>api/docs/docs.go</code> exists (run <code>make swag</code> if missing) 2. Add the blank import to <code>cmd/server/main.go</code> 3. Rebuild: <code>docker-compose up --build</code> 4. Access: http://localhost:8080/swagger/index.html</p>"},{"location":"SWAGGER/#issue-swagger-ui-shows-old-data","title":"Issue: Swagger UI shows old data","text":"<p>Solution:  - If using Docker: Rebuild containers to regenerate docs   <pre><code>docker-compose up --build\n</code></pre> - If running natively: Regenerate docs and restart server   <pre><code>make swag\n# Then restart your server\n</code></pre></p>"},{"location":"SWAGGER/#issue-failed-to-parse-annotations","title":"Issue: \"Failed to parse annotations\"","text":"<p>Solution: Check your swagger comments syntax. Common mistakes: - Missing spaces after <code>@</code> - Wrong tag names - Invalid type references - Missing required fields</p>"},{"location":"SWAGGER/#advanced-usage","title":"\ud83d\udcda Advanced Usage","text":""},{"location":"SWAGGER/#custom-types","title":"Custom Types","text":"<p>Define DTOs with swagger annotations:</p> <pre><code>type UserResponse struct {\n    ID    uint   `json:\"id\" example:\"1\"`\n    Name  string `json:\"name\" example:\"John Doe\"`\n    Email string `json:\"email\" example:\"john@example.com\"`\n}\n</code></pre>"},{"location":"SWAGGER/#multiple-tags","title":"Multiple Tags","text":"<pre><code>// @Tags users, admin\n</code></pre>"},{"location":"SWAGGER/#response-examples","title":"Response Examples","text":"<pre><code>// @Success 200 {object} UserResponse \"User found\"\n// @Success 200 {array} UserResponse \"Users list\"\n</code></pre>"},{"location":"SWAGGER/#multiple-responses","title":"Multiple Responses","text":"<pre><code>// @Success 200 {object} SuccessResponse\n// @Success 201 {object} CreatedResponse\n// @Failure 400 {object} ErrorResponse\n// @Failure 404 {object} NotFoundResponse\n// @Failure 500 {object} ServerErrorResponse\n</code></pre>"},{"location":"SWAGGER/#integration-with-cicd","title":"\ud83d\udd17 Integration with CI/CD","text":""},{"location":"SWAGGER/#github-actions","title":"GitHub Actions","text":"<pre><code>- name: Generate Swagger docs\n  run: |\n    go install github.com/swaggo/swag/cmd/swag@latest\n    swag init -g ./cmd/server/main.go -o ./api/docs\n\n- name: Check for changes\n  run: |\n    git diff --exit-code api/docs/ || \\\n    (echo \"Swagger docs not up to date. Run: make swag\" &amp;&amp; exit 1)\n</code></pre>"},{"location":"SWAGGER/#pre-commit-hook","title":"Pre-commit Hook","text":"<p>Create <code>.git/hooks/pre-commit</code>:</p> <pre><code>#!/bin/bash\nmake swag\ngit add api/docs/\n</code></pre>"},{"location":"SWAGGER/#resources","title":"\ud83d\udcd6 Resources","text":"<ul> <li>Swaggo Documentation</li> <li>Swagger/OpenAPI Spec</li> <li>Gin-Swagger Integration</li> </ul>"},{"location":"SWAGGER/#best-practices","title":"\ud83d\udca1 Best Practices","text":"<p>\u2705 Do: - Regenerate docs after changing API - Keep annotations up to date - Use meaningful descriptions - Provide example values - Document all error cases</p> <p>\u274c Don't: - Manually edit generated files - Commit with outdated docs - Skip documenting new endpoints - Use vague descriptions</p>"},{"location":"SWAGGER/#quick-reference","title":"\ud83c\udfaf Quick Reference","text":"<pre><code># Generate docs\nmake swag\n\n# Install swag\ngo install github.com/swaggo/swag/cmd/swag@latest\n\n# Verify swag\nswag --version\n\n# Format swagger comments\nswag fmt\n\n# View docs\nopen http://localhost:8080/swagger/index.html\n</code></pre> <p>Happy Documenting! \ud83d\udcda</p>"},{"location":"TESTING/","title":"Testing Guide","text":"<p>Comprehensive guide to testing in the Go REST API Boilerplate (GRAB) project.</p>"},{"location":"TESTING/#testing-philosophy","title":"\ud83d\udccb Testing Philosophy","text":"<p>GRAB follows a pragmatic testing approach that balances thoroughness with maintainability:</p> <ul> <li>\u2705 Integration tests for critical API flows</li> <li>\u2705 Unit tests for complex business logic</li> <li>\u2705 Fast execution using in-memory databases</li> <li>\u2705 No external dependencies for CI/CD</li> <li>\u2705 Table-driven tests for multiple scenarios</li> </ul>"},{"location":"TESTING/#types-of-tests","title":"\ud83c\udfaf Types of Tests","text":""},{"location":"TESTING/#1-integration-tests","title":"1. Integration Tests","text":"<p>Location: <code>tests/</code> directory</p> <p>Purpose: Test the complete request/response cycle including handlers, services, and repositories.</p> <p>When to use: - Testing API endpoints end-to-end - Verifying authentication flows - Testing CRUD operations - Validating error responses</p> <p>Example: <pre><code>func TestRegisterUser(t *testing.T) {\n    db := setupTestDB(t)\n    router := server.SetupRouter(db)\n\n    req := httptest.NewRequest(\"POST\", \"/api/v1/auth/register\", body)\n    w := httptest.NewRecorder()\n    router.ServeHTTP(w, req)\n\n    assert.Equal(t, http.StatusOK, w.Code)\n}\n</code></pre></p>"},{"location":"TESTING/#2-unit-tests","title":"2. Unit Tests","text":"<p>Location: Alongside the code (e.g., <code>internal/user/service_test.go</code>)</p> <p>Purpose: Test individual functions and methods in isolation.</p> <p>When to use: - Testing business logic - Testing utility functions - Testing validation logic - Testing error handling</p> <p>Example: <pre><code>// internal/user/service_test.go\nfunc TestValidateEmail(t *testing.T) {\n    tests := []struct {\n        name    string\n        email   string\n        wantErr bool\n    }{\n        {\"valid\", \"user@example.com\", false},\n        {\"invalid\", \"not-an-email\", true},\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            err := validateEmail(tt.email)\n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"got error %v, wantErr %v\", err, tt.wantErr)\n            }\n        })\n    }\n}\n</code></pre></p>"},{"location":"TESTING/#3-end-to-end-tests-future","title":"3. End-to-End Tests (Future)","text":"<p>Location: <code>e2e/</code> directory (not yet implemented)</p> <p>Purpose: Test the entire system including database, external services, etc.</p> <p>Planned for: v1.1.0+</p>"},{"location":"TESTING/#currently-implemented-tests","title":"\u2705 Currently Implemented Tests","text":""},{"location":"TESTING/#integration-tests-testshandler_testgo","title":"Integration Tests (<code>tests/handler_test.go</code>)","text":""},{"location":"TESTING/#authentication-tests","title":"Authentication Tests","text":"<p>TestRegisterUser - \u2705 Successful user registration - \u2705 Duplicate email handling - \u2705 Invalid input validation - \u2705 Password hashing verification - \u2705 JWT token generation</p> <p>TestLoginUser - \u2705 Successful login with correct credentials - \u2705 Failed login with wrong password - \u2705 Failed login with non-existent user - \u2705 JWT token validation</p>"},{"location":"TESTING/#user-management-tests","title":"User Management Tests","text":"<p>TestGetUser - \u2705 Get user by ID with authentication - \u2705 Get non-existent user (404) - \u2705 Unauthorized access</p> <p>TestUpdateUser - \u2705 Update user name and email - \u2705 Unauthorized update attempt - \u2705 Invalid data handling</p> <p>TestDeleteUser - \u2705 Delete user with authentication - \u2705 Delete non-existent user - \u2705 Unauthorized deletion</p>"},{"location":"TESTING/#test-helpers","title":"Test Helpers","text":"<p>setupTestDB(t) - Creates in-memory SQLite database - Runs migrations automatically - Returns configured GORM instance</p> <p>createTestUser(t, db) - Creates a test user with hashed password - Returns user object - Used for authentication tests</p> <p>getAuthToken(t, db) - Creates test user - Generates valid JWT token - Returns token string for authenticated requests</p>"},{"location":"TESTING/#running-tests","title":"\ud83d\ude80 Running Tests","text":""},{"location":"TESTING/#quick-commands","title":"Quick Commands","text":"<pre><code># Run all tests\nmake test\n\n# Run all tests with verbose output\ngo test -v ./...\n\n# Run tests with coverage\ngo test -cover ./...\n\n# Run tests with coverage report\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out\n\n# Run specific test\ngo test -v ./tests -run TestRegisterUser\n\n# Run tests in specific directory\ngo test ./tests/...\ngo test ./internal/user/...\n\n# Run tests with race detection\ngo test -race ./...\n</code></pre>"},{"location":"TESTING/#cicd","title":"CI/CD","text":"<p>Tests run automatically on: - \u2705 Push to <code>main</code> branch - \u2705 Push to <code>develop</code> branch - \u2705 Pull requests</p> <p>GitHub Actions Workflow: <code>.github/workflows/ci.yml</code></p> <pre><code>- name: Run tests\n  run: go test -v ./...\n\n- name: Run linter\n  run: golangci-lint run\n\n- name: Check go vet\n  run: go vet ./...\n</code></pre>"},{"location":"TESTING/#writing-new-tests","title":"\ud83d\udcdd Writing New Tests","text":""},{"location":"TESTING/#step-1-determine-test-type","title":"Step 1: Determine Test Type","text":"<p>Integration Test (tests/) - Testing API endpoints - Testing complete flows - Multiple layers involved</p> <p>Unit Test (internal/) - Testing single function - Testing business logic - Isolated component</p>"},{"location":"TESTING/#step-2-create-test-file","title":"Step 2: Create Test File","text":"<pre><code># Integration test\ntouch tests/my_feature_test.go\n\n# Unit test (alongside code)\ntouch internal/mypackage/service_test.go\n</code></pre>"},{"location":"TESTING/#step-3-write-test","title":"Step 3: Write Test","text":""},{"location":"TESTING/#integration-test-template","title":"Integration Test Template","text":"<pre><code>package tests\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n\n    \"github.com/vahiiiid/go-rest-api-boilerplate/internal/server\"\n)\n\nfunc TestMyFeature(t *testing.T) {\n    // Setup\n    db := setupTestDB(t)\n    router := server.SetupRouter(db)\n\n    // Prepare request\n    payload := map[string]string{\n        \"field\": \"value\",\n    }\n    body, _ := json.Marshal(payload)\n\n    // Make request\n    req := httptest.NewRequest(\"POST\", \"/api/v1/endpoint\", bytes.NewBuffer(body))\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    w := httptest.NewRecorder()\n\n    router.ServeHTTP(w, req)\n\n    // Assert response\n    if w.Code != http.StatusOK {\n        t.Errorf(\"Expected 200, got %d\", w.Code)\n    }\n\n    // Parse response\n    var response map[string]interface{}\n    if err := json.Unmarshal(w.Body.Bytes(), &amp;response); err != nil {\n        t.Fatalf(\"Failed to parse response: %v\", err)\n    }\n\n    // Validate response data\n    if response[\"field\"] != \"expected\" {\n        t.Errorf(\"Expected 'expected', got '%v'\", response[\"field\"])\n    }\n}\n</code></pre>"},{"location":"TESTING/#unit-test-template","title":"Unit Test Template","text":"<pre><code>package mypackage\n\nimport \"testing\"\n\nfunc TestMyFunction(t *testing.T) {\n    tests := []struct {\n        name     string\n        input    string\n        expected string\n        wantErr  bool\n    }{\n        {\n            name:     \"valid input\",\n            input:    \"test\",\n            expected: \"TEST\",\n            wantErr:  false,\n        },\n        {\n            name:     \"empty input\",\n            input:    \"\",\n            expected: \"\",\n            wantErr:  true,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            result, err := MyFunction(tt.input)\n\n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"MyFunction() error = %v, wantErr %v\", err, tt.wantErr)\n                return\n            }\n\n            if result != tt.expected {\n                t.Errorf(\"MyFunction() = %v, want %v\", result, tt.expected)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"TESTING/#step-4-test-with-authentication","title":"Step 4: Test with Authentication","text":"<p>For protected endpoints, use the <code>getAuthToken</code> helper:</p> <pre><code>func TestProtectedEndpoint(t *testing.T) {\n    db := setupTestDB(t)\n    router := server.SetupRouter(db)\n\n    // Get auth token\n    token := getAuthToken(t, db)\n\n    // Make authenticated request\n    req := httptest.NewRequest(\"GET\", \"/api/v1/users/1\", nil)\n    req.Header.Set(\"Authorization\", \"Bearer \"+token)\n    w := httptest.NewRecorder()\n\n    router.ServeHTTP(w, req)\n\n    if w.Code != http.StatusOK {\n        t.Errorf(\"Expected 200, got %d\", w.Code)\n    }\n}\n</code></pre>"},{"location":"TESTING/#testing-best-practices","title":"\ud83c\udfa8 Testing Best Practices","text":""},{"location":"TESTING/#1-test-independence","title":"1. Test Independence","text":"<p>Each test should be completely independent:</p> <pre><code>func TestFeatureA(t *testing.T) {\n    db := setupTestDB(t) // Fresh database for each test\n    // ... test logic\n}\n\nfunc TestFeatureB(t *testing.T) {\n    db := setupTestDB(t) // Another fresh database\n    // ... test logic\n}\n</code></pre>"},{"location":"TESTING/#2-use-subtests","title":"2. Use Subtests","text":"<p>Group related tests with <code>t.Run()</code>:</p> <pre><code>func TestUserValidation(t *testing.T) {\n    t.Run(\"valid email\", func(t *testing.T) {\n        // test valid email\n    })\n\n    t.Run(\"invalid email\", func(t *testing.T) {\n        // test invalid email\n    })\n\n    t.Run(\"empty email\", func(t *testing.T) {\n        // test empty email\n    })\n}\n</code></pre>"},{"location":"TESTING/#3-test-error-cases","title":"3. Test Error Cases","text":"<p>Don't just test happy paths:</p> <pre><code>func TestCreateUser(t *testing.T) {\n    t.Run(\"success\", func(t *testing.T) {\n        // test successful creation\n    })\n\n    t.Run(\"duplicate email\", func(t *testing.T) {\n        // test duplicate email error\n    })\n\n    t.Run(\"invalid input\", func(t *testing.T) {\n        // test validation errors\n    })\n\n    t.Run(\"database error\", func(t *testing.T) {\n        // test database failure handling\n    })\n}\n</code></pre>"},{"location":"TESTING/#4-use-table-driven-tests","title":"4. Use Table-Driven Tests","text":"<p>For testing multiple scenarios:</p> <pre><code>func TestPasswordValidation(t *testing.T) {\n    tests := []struct {\n        name     string\n        password string\n        wantErr  bool\n        errMsg   string\n    }{\n        {\"valid password\", \"SecurePass123!\", false, \"\"},\n        {\"too short\", \"abc\", true, \"password too short\"},\n        {\"no numbers\", \"SecurePass!\", true, \"must contain number\"},\n        {\"no special chars\", \"SecurePass123\", true, \"must contain special character\"},\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            err := validatePassword(tt.password)\n\n            if (err != nil) != tt.wantErr {\n                t.Errorf(\"validatePassword() error = %v, wantErr %v\", err, tt.wantErr)\n            }\n\n            if err != nil &amp;&amp; err.Error() != tt.errMsg {\n                t.Errorf(\"error message = %v, want %v\", err.Error(), tt.errMsg)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"TESTING/#5-clean-test-data","title":"5. Clean Test Data","text":"<p>Use descriptive test data:</p> <pre><code>// Good\ntestUser := &amp;user.User{\n    Name:  \"Test User\",\n    Email: \"test@example.com\",\n}\n\n// Bad\ntestUser := &amp;user.User{\n    Name:  \"aaa\",\n    Email: \"a@a.com\",\n}\n</code></pre>"},{"location":"TESTING/#6-use-assertions","title":"6. Use Assertions","text":"<p>Consider using a testing library for cleaner assertions:</p> <pre><code>// Without library\nif result != expected {\n    t.Errorf(\"got %v, want %v\", result, expected)\n}\n\n// With testify/assert\nassert.Equal(t, expected, result)\nassert.NoError(t, err)\nassert.NotNil(t, user)\n</code></pre>"},{"location":"TESTING/#test-database","title":"\ud83d\uddc4\ufe0f Test Database","text":""},{"location":"TESTING/#sqlite-in-memory","title":"SQLite In-Memory","text":"<p>GRAB uses SQLite in-memory database for tests:</p> <p>Advantages: - \u2705 Fast: No disk I/O - \u2705 Isolated: Each test gets fresh database - \u2705 No setup: No external database required - \u2705 CI-friendly: Works in GitHub Actions</p> <p>Setup: <pre><code>func setupTestDB(t *testing.T) *gorm.DB {\n    db, err := gorm.Open(sqlite.Open(\":memory:\"), &amp;gorm.Config{})\n    if err != nil {\n        t.Fatalf(\"Failed to connect to test database: %v\", err)\n    }\n\n    // Run migrations\n    if err := db.AutoMigrate(&amp;user.User{}); err != nil {\n        t.Fatalf(\"Failed to migrate test database: %v\", err)\n    }\n\n    return db\n}\n</code></pre></p>"},{"location":"TESTING/#postgresql-for-e2e-tests-future","title":"PostgreSQL for E2E Tests (Future)","text":"<p>For end-to-end tests, use Docker PostgreSQL:</p> <pre><code># Start test database\ndocker run -d --name test-postgres \\\n  -e POSTGRES_PASSWORD=test \\\n  -e POSTGRES_DB=test_db \\\n  -p 5433:5432 \\\n  postgres:15-alpine\n\n# Run E2E tests\nTEST_DB_PORT=5433 go test ./e2e/...\n\n# Cleanup\ndocker rm -f test-postgres\n</code></pre>"},{"location":"TESTING/#test-coverage","title":"\ud83d\udcca Test Coverage","text":""},{"location":"TESTING/#current-coverage","title":"Current Coverage","text":"<p>Run coverage report:</p> <pre><code>go test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out\n</code></pre> <p>Target Coverage: 80%+</p>"},{"location":"TESTING/#coverage-by-package","title":"Coverage by Package","text":"<pre><code># Check coverage per package\ngo test -cover ./internal/user\ngo test -cover ./internal/auth\ngo test -cover ./tests\n</code></pre>"},{"location":"TESTING/#improving-coverage","title":"Improving Coverage","text":"<p>High Priority: - \u2705 All API handlers - \u2705 Authentication logic - \u2705 User CRUD operations</p> <p>Medium Priority: - \u26a0\ufe0f Middleware functions - \u26a0\ufe0f Validation logic - \u26a0\ufe0f Error handling</p> <p>Low Priority: - \u2139\ufe0f Configuration loading - \u2139\ufe0f Database connection - \u2139\ufe0f Main function</p>"},{"location":"TESTING/#testing-tools","title":"\ud83d\udd27 Testing Tools","text":""},{"location":"TESTING/#installed-tools","title":"Installed Tools","text":"<p>Go Testing: Built-in testing framework <pre><code>go test ./...\n</code></pre></p> <p>httptest: HTTP testing utilities <pre><code>import \"net/http/httptest\"\n</code></pre></p> <p>GORM SQLite: In-memory database <pre><code>import \"gorm.io/driver/sqlite\"\n</code></pre></p>"},{"location":"TESTING/#recommended-tools-optional","title":"Recommended Tools (Optional)","text":"<p>testify/assert: Better assertions <pre><code>go get github.com/stretchr/testify/assert\n</code></pre></p> <p>gomock: Mocking framework <pre><code>go install github.com/golang/mock/mockgen@latest\n</code></pre></p> <p>go-sqlmock: Database mocking <pre><code>go get github.com/DATA-DOG/go-sqlmock\n</code></pre></p>"},{"location":"TESTING/#debugging-tests","title":"\ud83d\udc1b Debugging Tests","text":""},{"location":"TESTING/#verbose-output","title":"Verbose Output","text":"<pre><code># See detailed test output\ngo test -v ./...\n\n# See what tests are running\ngo test -v ./tests -run TestRegisterUser\n</code></pre>"},{"location":"TESTING/#print-debugging","title":"Print Debugging","text":"<pre><code>func TestMyFeature(t *testing.T) {\n    // Print request body\n    t.Logf(\"Request body: %s\", body)\n\n    // Print response\n    t.Logf(\"Response: %s\", w.Body.String())\n\n    // Print status code\n    t.Logf(\"Status code: %d\", w.Code)\n}\n</code></pre>"},{"location":"TESTING/#failed-test-output","title":"Failed Test Output","text":"<pre><code># Show only failed tests\ngo test ./... | grep FAIL\n\n# Run only failed tests\ngo test -failfast ./...\n</code></pre>"},{"location":"TESTING/#testing-roadmap","title":"\ud83d\udcc5 Testing Roadmap","text":""},{"location":"TESTING/#v110-current","title":"v1.1.0 (Current)","text":"<ul> <li>\u2705 Integration tests for all endpoints</li> <li>\u2705 Authentication flow tests</li> <li>\u2705 Request logging middleware tests</li> <li>\u2705 Configuration management tests</li> <li>\u2705 CRUD operation tests</li> <li>\u2705 Error handling tests</li> </ul>"},{"location":"TESTING/#v110-planned","title":"v1.1.0 (Planned)","text":"<ul> <li>\u23f3 Unit tests for services</li> <li>\u23f3 Middleware tests</li> <li>\u23f3 Validation tests</li> <li>\u23f3 80%+ code coverage</li> </ul>"},{"location":"TESTING/#v120-future","title":"v1.2.0 (Future)","text":"<ul> <li>\ud83d\udccb E2E tests with PostgreSQL</li> <li>\ud83d\udccb Performance tests</li> <li>\ud83d\udccb Load tests</li> <li>\ud83d\udccb Security tests</li> </ul>"},{"location":"TESTING/#v200-future","title":"v2.0.0 (Future)","text":"<ul> <li>\ud83d\udccb Contract tests</li> <li>\ud83d\udccb Mutation tests</li> <li>\ud83d\udccb Property-based tests</li> <li>\ud83d\udccb Chaos engineering tests</li> </ul>"},{"location":"TESTING/#resources","title":"\ud83d\udcda Resources","text":""},{"location":"TESTING/#official-documentation","title":"Official Documentation","text":"<ul> <li>Go Testing Package</li> <li>Go Testing Best Practices</li> <li>Table Driven Tests</li> </ul>"},{"location":"TESTING/#testing-libraries","title":"Testing Libraries","text":"<ul> <li>testify - Assertions and mocking</li> <li>gomock - Mocking framework</li> <li>httpexpect - HTTP testing</li> </ul>"},{"location":"TESTING/#articles","title":"Articles","text":"<ul> <li>Testing in Go</li> <li>Advanced Testing in Go</li> <li>Go Testing Techniques</li> </ul>"},{"location":"TESTING/#contributing-tests","title":"\ud83e\udd1d Contributing Tests","text":"<p>When contributing, please:</p> <ol> <li>\u2705 Write tests for new features</li> <li>\u2705 Update existing tests if behavior changes</li> <li>\u2705 Ensure all tests pass before submitting PR</li> <li>\u2705 Aim for 80%+ coverage on new code</li> <li>\u2705 Follow existing test patterns</li> <li>\u2705 Add comments for complex test logic</li> </ol> <p>Test Checklist: - [ ] Tests pass locally (<code>make test</code>) - [ ] Tests pass in CI - [ ] New features have tests - [ ] Edge cases are covered - [ ] Error cases are tested - [ ] Documentation is updated</p>"},{"location":"TESTING/#need-help","title":"\ud83d\udca1 Need Help?","text":"<ul> <li>\ud83d\udcd6 Check tests/README.md for quick reference</li> <li>\ud83d\udc40 Look at existing tests in <code>tests/handler_test.go</code> for examples</li> <li>\ud83d\udc1b Open an issue if you find bugs</li> <li>\ud83d\udcac Start a discussion for questions</li> </ul> <p>Happy Testing! \ud83e\uddea</p>"},{"location":"TODO_EXAMPLE/","title":"\ud83d\udcdd TODO List Implementation","text":"<p>This guide walks you through implementing a complete TODO list feature from scratch, demonstrating all layers of the clean architecture used in GRAB.</p>"},{"location":"TODO_EXAMPLE/#what-youll-build","title":"\ud83c\udfaf What You'll Build","text":"<p>A fully functional TODO list API with: - \u2705 Create, Read, Update, Delete operations - \u2705 User ownership and authentication - \u2705 Database migrations - \u2705 Swagger documentation - \u2705 Complete CRUD endpoints</p>"},{"location":"TODO_EXAMPLE/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>GRAB project set up and running</li> <li>Basic understanding of Go</li> <li>Familiarity with REST APIs</li> </ul>"},{"location":"TODO_EXAMPLE/#implementation-steps","title":"\ud83d\ude80 Implementation Steps","text":""},{"location":"TODO_EXAMPLE/#step-1-create-directory-structure","title":"Step 1: Create Directory Structure","text":"<pre><code>mkdir -p internal/todo\ntouch internal/todo/model.go\ntouch internal/todo/dto.go\ntouch internal/todo/repository.go\ntouch internal/todo/service.go\ntouch internal/todo/handler.go\n</code></pre>"},{"location":"TODO_EXAMPLE/#step-2-define-model-internaltodomodelgo","title":"Step 2: Define Model (<code>internal/todo/model.go</code>)","text":"<pre><code>package todo\n\nimport (\n    \"time\"\n    \"gorm.io/gorm\"\n)\n\n// Todo represents a task in the system\ntype Todo struct {\n    ID          uint           `gorm:\"primaryKey\" json:\"id\"`\n    Title       string         `gorm:\"not null\" json:\"title\"`\n    Description string         `gorm:\"type:text\" json:\"description\"`\n    Completed   bool           `gorm:\"default:false\" json:\"completed\"`\n    UserID      uint           `gorm:\"not null;index\" json:\"user_id\"`\n    CreatedAt   time.Time      `json:\"created_at\"`\n    UpdatedAt   time.Time      `json:\"updated_at\"`\n    DeletedAt   gorm.DeletedAt `gorm:\"index\" json:\"-\"`\n}\n\n// TableName specifies the table name for GORM\nfunc (Todo) TableName() string {\n    return \"todos\"\n}\n</code></pre> <p>Key Points: - <code>gorm:\"primaryKey\"</code> - Defines the primary key - <code>gorm:\"not null\"</code> - Makes field required - <code>gorm:\"index\"</code> - Creates database index for faster queries - <code>DeletedAt</code> - Enables soft deletes - <code>json:\"-\"</code> - Excludes field from JSON responses</p>"},{"location":"TODO_EXAMPLE/#step-3-create-migration-files","title":"Step 3: Create Migration Files","text":"<p><code>migrations/000002_create_todos_table.up.sql</code>: <pre><code>CREATE TABLE IF NOT EXISTS todos (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    completed BOOLEAN DEFAULT FALSE,\n    user_id INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    deleted_at TIMESTAMP,\n\n    CONSTRAINT fk_todos_user\n        FOREIGN KEY (user_id)\n        REFERENCES users(id)\n        ON DELETE CASCADE\n);\n\nCREATE INDEX idx_todos_user_id ON todos(user_id);\nCREATE INDEX idx_todos_deleted_at ON todos(deleted_at);\n</code></pre></p> <p><code>migrations/000002_create_todos_table.down.sql</code>: <pre><code>DROP INDEX IF EXISTS idx_todos_deleted_at;\nDROP INDEX IF EXISTS idx_todos_user_id;\nDROP TABLE IF EXISTS todos;\n</code></pre></p> <p>Create migration: <pre><code>make migrate-create NAME=create_todos_table\n</code></pre></p>"},{"location":"TODO_EXAMPLE/#step-4-define-dtos-internaltododtogo","title":"Step 4: Define DTOs (<code>internal/todo/dto.go</code>)","text":"<pre><code>package todo\n\nimport \"time\"\n\n// CreateTodoRequest represents the request to create a new todo\ntype CreateTodoRequest struct {\n    Title       string `json:\"title\" binding:\"required,min=1,max=255\"`\n    Description string `json:\"description\" binding:\"max=1000\"`\n}\n\n// UpdateTodoRequest represents the request to update a todo\ntype UpdateTodoRequest struct {\n    Title       *string `json:\"title\" binding:\"omitempty,min=1,max=255\"`\n    Description *string `json:\"description\" binding:\"omitempty,max=1000\"`\n    Completed   *bool   `json:\"completed\"`\n}\n\n// TodoResponse represents a todo in API responses\ntype TodoResponse struct {\n    ID          uint      `json:\"id\"`\n    Title       string    `json:\"title\"`\n    Description string    `json:\"description\"`\n    Completed   bool      `json:\"completed\"`\n    UserID      uint      `json:\"user_id\"`\n    CreatedAt   time.Time `json:\"created_at\"`\n    UpdatedAt   time.Time `json:\"updated_at\"`\n}\n\n// TodoListResponse represents a list of todos\ntype TodoListResponse struct {\n    Todos []TodoResponse `json:\"todos\"`\n    Total int            `json:\"total\"`\n}\n\n// ErrorResponse represents an error response\ntype ErrorResponse struct {\n    Error string `json:\"error\"`\n}\n\n// Helper function to convert model to response\nfunc toTodoResponse(todo *Todo) TodoResponse {\n    return TodoResponse{\n        ID:          todo.ID,\n        Title:       todo.Title,\n        Description: todo.Description,\n        Completed:   todo.Completed,\n        UserID:      todo.UserID,\n        CreatedAt:   todo.CreatedAt,\n        UpdatedAt:   todo.UpdatedAt,\n    }\n}\n</code></pre> <p>Key Points: - <code>binding:\"required\"</code> - Field is mandatory - <code>binding:\"omitempty\"</code> - Field is optional - Use pointers for optional fields in updates - Separate request and response DTOs</p>"},{"location":"TODO_EXAMPLE/#step-5-create-repository-internaltodorepositorygo","title":"Step 5: Create Repository (<code>internal/todo/repository.go</code>)","text":"<pre><code>package todo\n\nimport (\n    \"gorm.io/gorm\"\n)\n\n// TodoRepository defines the interface for todo data operations\ntype TodoRepository interface {\n    Create(todo *Todo) error\n    FindByID(id uint) (*Todo, error)\n    FindByUserID(userID uint) ([]Todo, error)\n    Update(todo *Todo) error\n    Delete(id uint) error\n}\n\n// GormTodoRepository implements TodoRepository using GORM\ntype GormTodoRepository struct {\n    db *gorm.DB\n}\n\n// NewRepository creates a new todo repository\nfunc NewRepository(db *gorm.DB) TodoRepository {\n    return &amp;GormTodoRepository{db: db}\n}\n\n// Create inserts a new todo into the database\nfunc (r *GormTodoRepository) Create(todo *Todo) error {\n    return r.db.Create(todo).Error\n}\n\n// FindByID retrieves a todo by its ID\nfunc (r *GormTodoRepository) FindByID(id uint) (*Todo, error) {\n    var todo Todo\n    if err := r.db.First(&amp;todo, id).Error; err != nil {\n        return nil, err\n    }\n    return &amp;todo, nil\n}\n\n// FindByUserID retrieves all todos for a specific user\nfunc (r *GormTodoRepository) FindByUserID(userID uint) ([]Todo, error) {\n    var todos []Todo\n    if err := r.db.Where(\"user_id = ?\", userID).Order(\"created_at DESC\").Find(&amp;todos).Error; err != nil {\n        return nil, err\n    }\n    return todos, nil\n}\n\n// Update updates an existing todo\nfunc (r *GormTodoRepository) Update(todo *Todo) error {\n    return r.db.Save(todo).Error\n}\n\n// Delete soft deletes a todo by ID\nfunc (r *GormTodoRepository) Delete(id uint) error {\n    return r.db.Delete(&amp;Todo{}, id).Error\n}\n</code></pre> <p>Key Points: - Interface defines contract - GORM handles SQL generation - Use parameterized queries (automatic with GORM) - Soft delete with <code>DeletedAt</code></p>"},{"location":"TODO_EXAMPLE/#step-6-implement-service-internaltodoservicego","title":"Step 6: Implement Service (<code>internal/todo/service.go</code>)","text":"<pre><code>package todo\n\nimport (\n    \"errors\"\n    \"gorm.io/gorm\"\n)\n\n// TodoService handles business logic for todos\ntype TodoService struct {\n    repo TodoRepository\n}\n\n// NewService creates a new todo service\nfunc NewService(repo TodoRepository) *TodoService {\n    return &amp;TodoService{repo: repo}\n}\n\n// CreateTodo creates a new todo for a user\nfunc (s *TodoService) CreateTodo(userID uint, req CreateTodoRequest) (*Todo, error) {\n    todo := &amp;Todo{\n        Title:       req.Title,\n        Description: req.Description,\n        Completed:   false,\n        UserID:      userID,\n    }\n\n    if err := s.repo.Create(todo); err != nil {\n        return nil, err\n    }\n\n    return todo, nil\n}\n\n// GetUserTodos retrieves all todos for a user\nfunc (s *TodoService) GetUserTodos(userID uint) ([]Todo, error) {\n    return s.repo.FindByUserID(userID)\n}\n\n// GetTodo retrieves a specific todo and verifies ownership\nfunc (s *TodoService) GetTodo(todoID, userID uint) (*Todo, error) {\n    todo, err := s.repo.FindByID(todoID)\n    if err != nil {\n        if errors.Is(err, gorm.ErrRecordNotFound) {\n            return nil, errors.New(\"todo not found\")\n        }\n        return nil, err\n    }\n\n    // Verify ownership\n    if todo.UserID != userID {\n        return nil, errors.New(\"unauthorized\")\n    }\n\n    return todo, nil\n}\n\n// UpdateTodo updates an existing todo\nfunc (s *TodoService) UpdateTodo(todoID, userID uint, req UpdateTodoRequest) (*Todo, error) {\n    // Get and verify ownership\n    todo, err := s.GetTodo(todoID, userID)\n    if err != nil {\n        return nil, err\n    }\n\n    // Update fields if provided\n    if req.Title != nil {\n        todo.Title = *req.Title\n    }\n    if req.Description != nil {\n        todo.Description = *req.Description\n    }\n    if req.Completed != nil {\n        todo.Completed = *req.Completed\n    }\n\n    if err := s.repo.Update(todo); err != nil {\n        return nil, err\n    }\n\n    return todo, nil\n}\n\n// DeleteTodo deletes a todo\nfunc (s *TodoService) DeleteTodo(todoID, userID uint) error {\n    // Verify ownership\n    _, err := s.GetTodo(todoID, userID)\n    if err != nil {\n        return err\n    }\n\n    return s.repo.Delete(todoID)\n}\n</code></pre> <p>Key Points: - Business logic lives here - Always verify ownership - Handle errors appropriately - Keep functions focused and small</p>"},{"location":"TODO_EXAMPLE/#step-7-create-handlers-internaltodohandlergo","title":"Step 7: Create Handlers (<code>internal/todo/handler.go</code>)","text":"<pre><code>package todo\n\nimport (\n    \"errors\"\n    \"net/http\"\n    \"strconv\"\n\n    \"github.com/gin-gonic/gin\"\n)\n\n// TodoHandler handles HTTP requests for todos\ntype TodoHandler struct {\n    service *TodoService\n}\n\n// NewHandler creates a new todo handler\nfunc NewHandler(service *TodoService) *TodoHandler {\n    return &amp;TodoHandler{service: service}\n}\n\n// getUserID is a helper to extract user ID from context\nfunc (h *TodoHandler) getUserID(c *gin.Context) (uint, error) {\n    userID, exists := c.Get(\"user_id\")\n    if !exists {\n        return 0, errors.New(\"user not authenticated\")\n    }\n    return userID.(uint), nil\n}\n\n// CreateTodo godoc\n// @Summary Create a new todo\n// @Description Create a new todo item for the authenticated user\n// @Tags todos\n// @Accept json\n// @Produce json\n// @Param todo body CreateTodoRequest true \"Todo data\"\n// @Success 201 {object} TodoResponse\n// @Failure 400 {object} ErrorResponse\n// @Failure 401 {object} ErrorResponse\n// @Security BearerAuth\n// @Router /api/v1/todos [post]\nfunc (h *TodoHandler) CreateTodo(c *gin.Context) {\n    userID, err := h.getUserID(c)\n    if err != nil {\n        c.JSON(http.StatusUnauthorized, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    var req CreateTodoRequest\n    if err := c.ShouldBindJSON(&amp;req); err != nil {\n        c.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    todo, err := h.service.CreateTodo(userID, req)\n    if err != nil {\n        c.JSON(http.StatusInternalServerError, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    c.JSON(http.StatusCreated, toTodoResponse(todo))\n}\n\n// GetTodos godoc\n// @Summary Get all todos\n// @Description Get all todos for the authenticated user\n// @Tags todos\n// @Produce json\n// @Success 200 {object} TodoListResponse\n// @Failure 401 {object} ErrorResponse\n// @Security BearerAuth\n// @Router /api/v1/todos [get]\nfunc (h *TodoHandler) GetTodos(c *gin.Context) {\n    userID, err := h.getUserID(c)\n    if err != nil {\n        c.JSON(http.StatusUnauthorized, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    todos, err := h.service.GetUserTodos(userID)\n    if err != nil {\n        c.JSON(http.StatusInternalServerError, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    responses := make([]TodoResponse, len(todos))\n    for i, todo := range todos {\n        responses[i] = toTodoResponse(&amp;todo)\n    }\n\n    c.JSON(http.StatusOK, TodoListResponse{\n        Todos: responses,\n        Total: len(responses),\n    })\n}\n\n// GetTodo godoc\n// @Summary Get a todo by ID\n// @Description Get a specific todo by ID for the authenticated user\n// @Tags todos\n// @Produce json\n// @Param id path int true \"Todo ID\"\n// @Success 200 {object} TodoResponse\n// @Failure 400 {object} ErrorResponse\n// @Failure 401 {object} ErrorResponse\n// @Failure 404 {object} ErrorResponse\n// @Security BearerAuth\n// @Router /api/v1/todos/{id} [get]\nfunc (h *TodoHandler) GetTodo(c *gin.Context) {\n    userID, err := h.getUserID(c)\n    if err != nil {\n        c.JSON(http.StatusUnauthorized, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    todoID, err := strconv.ParseUint(c.Param(\"id\"), 10, 32)\n    if err != nil {\n        c.JSON(http.StatusBadRequest, ErrorResponse{Error: \"invalid todo ID\"})\n        return\n    }\n\n    todo, err := h.service.GetTodo(uint(todoID), userID)\n    if err != nil {\n        if err.Error() == \"todo not found\" {\n            c.JSON(http.StatusNotFound, ErrorResponse{Error: err.Error()})\n        } else if err.Error() == \"unauthorized\" {\n            c.JSON(http.StatusForbidden, ErrorResponse{Error: err.Error()})\n        } else {\n            c.JSON(http.StatusInternalServerError, ErrorResponse{Error: err.Error()})\n        }\n        return\n    }\n\n    c.JSON(http.StatusOK, toTodoResponse(todo))\n}\n\n// UpdateTodo godoc\n// @Summary Update a todo\n// @Description Update an existing todo for the authenticated user\n// @Tags todos\n// @Accept json\n// @Produce json\n// @Param id path int true \"Todo ID\"\n// @Param todo body UpdateTodoRequest true \"Todo update data\"\n// @Success 200 {object} TodoResponse\n// @Failure 400 {object} ErrorResponse\n// @Failure 401 {object} ErrorResponse\n// @Failure 404 {object} ErrorResponse\n// @Security BearerAuth\n// @Router /api/v1/todos/{id} [put]\nfunc (h *TodoHandler) UpdateTodo(c *gin.Context) {\n    userID, err := h.getUserID(c)\n    if err != nil {\n        c.JSON(http.StatusUnauthorized, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    todoID, err := strconv.ParseUint(c.Param(\"id\"), 10, 32)\n    if err != nil {\n        c.JSON(http.StatusBadRequest, ErrorResponse{Error: \"invalid todo ID\"})\n        return\n    }\n\n    var req UpdateTodoRequest\n    if err := c.ShouldBindJSON(&amp;req); err != nil {\n        c.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    todo, err := h.service.UpdateTodo(uint(todoID), userID, req)\n    if err != nil {\n        if err.Error() == \"todo not found\" {\n            c.JSON(http.StatusNotFound, ErrorResponse{Error: err.Error()})\n        } else if err.Error() == \"unauthorized\" {\n            c.JSON(http.StatusForbidden, ErrorResponse{Error: err.Error()})\n        } else {\n            c.JSON(http.StatusInternalServerError, ErrorResponse{Error: err.Error()})\n        }\n        return\n    }\n\n    c.JSON(http.StatusOK, toTodoResponse(todo))\n}\n\n// DeleteTodo godoc\n// @Summary Delete a todo\n// @Description Delete a todo for the authenticated user\n// @Tags todos\n// @Produce json\n// @Param id path int true \"Todo ID\"\n// @Success 204\n// @Failure 400 {object} ErrorResponse\n// @Failure 401 {object} ErrorResponse\n// @Failure 404 {object} ErrorResponse\n// @Security BearerAuth\n// @Router /api/v1/todos/{id} [delete]\nfunc (h *TodoHandler) DeleteTodo(c *gin.Context) {\n    userID, err := h.getUserID(c)\n    if err != nil {\n        c.JSON(http.StatusUnauthorized, ErrorResponse{Error: err.Error()})\n        return\n    }\n\n    todoID, err := strconv.ParseUint(c.Param(\"id\"), 10, 32)\n    if err != nil {\n        c.JSON(http.StatusBadRequest, ErrorResponse{Error: \"invalid todo ID\"})\n        return\n    }\n\n    if err := h.service.DeleteTodo(uint(todoID), userID); err != nil {\n        if err.Error() == \"todo not found\" {\n            c.JSON(http.StatusNotFound, ErrorResponse{Error: err.Error()})\n        } else if err.Error() == \"unauthorized\" {\n            c.JSON(http.StatusForbidden, ErrorResponse{Error: err.Error()})\n        } else {\n            c.JSON(http.StatusInternalServerError, ErrorResponse{Error: err.Error()})\n        }\n        return\n    }\n\n    c.Status(http.StatusNoContent)\n}\n</code></pre> <p>Key Points: - Swagger annotations for documentation - Proper HTTP status codes - Error handling for different scenarios - Extract user ID from JWT context</p>"},{"location":"TODO_EXAMPLE/#step-8-register-routes-internalserverroutergo","title":"Step 8: Register Routes (<code>internal/server/router.go</code>)","text":"<p>Add to your router setup:</p> <pre><code>// Add to imports\nimport (\n    \"github.com/vahiiiid/go-rest-api-boilerplate/internal/todo\"\n)\n\n// In SetupRouter function, after initializing user handler:\nfunc SetupRouter(userHandler *user.UserHandler, authService *auth.AuthService, todoHandler *todo.TodoHandler) *gin.Engine {\n    // ... existing code ...\n\n    // Protected routes (requires authentication)\n    protected := v1.Group(\"\")\n    protected.Use(auth.AuthMiddleware(authService))\n    {\n        // User routes\n        protected.GET(\"/users/:id\", userHandler.GetUser)\n        protected.PUT(\"/users/:id\", userHandler.UpdateUser)\n        protected.DELETE(\"/users/:id\", userHandler.DeleteUser)\n\n        // Todo routes (NEW)\n        protected.POST(\"/todos\", todoHandler.CreateTodo)\n        protected.GET(\"/todos\", todoHandler.GetTodos)\n        protected.GET(\"/todos/:id\", todoHandler.GetTodo)\n        protected.PUT(\"/todos/:id\", todoHandler.UpdateTodo)\n        protected.DELETE(\"/todos/:id\", todoHandler.DeleteTodo)\n    }\n\n    return router\n}\n</code></pre>"},{"location":"TODO_EXAMPLE/#step-9-update-main-cmdservermaingo","title":"Step 9: Update Main (<code>cmd/server/main.go</code>)","text":"<pre><code>// Add to imports\nimport (\n    \"github.com/vahiiiid/go-rest-api-boilerplate/internal/todo\"\n)\n\nfunc main() {\n    // ... existing code ...\n\n    // Run migrations\n    log.Println(\"Running database migrations...\")\n    if err := database.AutoMigrate(&amp;user.User{}, &amp;todo.Todo{}); err != nil {\n        log.Fatalf(\"Failed to run migrations: %v\", err)\n    }\n    log.Println(\"Migrations completed successfully\")\n\n    // Initialize services\n    authService := auth.NewService()\n    userRepo := user.NewRepository(database)\n    userService := user.NewService(userRepo)\n    userHandler := user.NewHandler(userService, authService)\n\n    // Todo services (NEW)\n    todoRepo := todo.NewRepository(database)\n    todoService := todo.NewService(todoRepo)\n    todoHandler := todo.NewHandler(todoService)\n\n    // Setup router with todo handler\n    router := server.SetupRouter(userHandler, authService, todoHandler)\n\n    // ... rest of code ...\n}\n</code></pre>"},{"location":"TODO_EXAMPLE/#step-10-run-migrations","title":"Step 10: Run Migrations","text":"<pre><code># If using AutoMigrate (default)\n# Just restart the app, it will auto-create the table\n\n# If using golang-migrate\nmake migrate-docker-up\n</code></pre>"},{"location":"TODO_EXAMPLE/#step-11-test-the-api","title":"Step 11: Test the API","text":"<p>Create a Todo: <pre><code># First, register and get token\nTOKEN=$(curl -s -X POST http://localhost:8080/api/v1/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"Alice\",\"email\":\"alice@example.com\",\"password\":\"secret123\"}' \\\n  | jq -r '.token')\n\n# Create a todo\ncurl -X POST http://localhost:8080/api/v1/todos \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"title\": \"Buy groceries\",\n    \"description\": \"Milk, eggs, bread\"\n  }'\n</code></pre></p> <p>Get All Todos: <pre><code>curl -X GET http://localhost:8080/api/v1/todos \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre></p> <p>Update a Todo: <pre><code>curl -X PUT http://localhost:8080/api/v1/todos/1 \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"completed\": true\n  }'\n</code></pre></p> <p>Delete a Todo: <pre><code>curl -X DELETE http://localhost:8080/api/v1/todos/1 \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre></p>"},{"location":"TODO_EXAMPLE/#step-12-regenerate-swagger-docs","title":"Step 12: Regenerate Swagger Docs","text":"<pre><code>make swag\n</code></pre> <p>Visit <code>http://localhost:8080/swagger/index.html</code> to see the new TODO endpoints!</p>"},{"location":"TODO_EXAMPLE/#congratulations","title":"\ud83c\udf89 Congratulations!","text":"<p>You've successfully implemented a complete TODO list feature following GRAB's clean architecture! This same pattern can be applied to any new feature you want to add.</p>"},{"location":"TODO_EXAMPLE/#what-you-learned","title":"\ud83d\udcda What You Learned","text":"<ul> <li>\u2705 Creating models with GORM</li> <li>\u2705 Writing database migrations</li> <li>\u2705 Defining DTOs with validation</li> <li>\u2705 Implementing repositories</li> <li>\u2705 Writing business logic in services</li> <li>\u2705 Creating HTTP handlers</li> <li>\u2705 Registering routes</li> <li>\u2705 Adding Swagger documentation</li> <li>\u2705 Testing with curl</li> </ul>"},{"location":"TODO_EXAMPLE/#next-steps","title":"\ud83d\udd04 Next Steps","text":"<ul> <li>Add pagination to the list endpoint</li> <li>Add filtering (completed/incomplete)</li> <li>Add search functionality</li> <li>Write unit tests</li> <li>Add due dates to todos</li> <li>Implement todo categories</li> </ul>"},{"location":"TODO_EXAMPLE/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Always verify ownership in services</li> <li>Use proper HTTP status codes</li> <li>Add Swagger annotations</li> <li>Test each layer independently</li> <li>Keep functions small and focused</li> <li>Handle errors appropriately</li> </ul> <p>Happy Coding! \ud83d\ude80</p> <p>For more details on the architecture and patterns, see the Development Guide.</p>"}]}